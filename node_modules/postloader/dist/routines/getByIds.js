"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slonik = require("slonik");

var _lodash = require("lodash");

var _Logger = _interopRequireDefault(require("../Logger"));

var _errors = require("../errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = _Logger.default.child({
  namespace: 'getByIds'
});

var _default = async (connection, tableName, ids, idName = 'id', identifiers, resultIsArray) => {
  let rows = [];

  if (ids.length > 0) {
    rows = await connection.any(_slonik.sql`
      SELECT ${_slonik.sql.raw(identifiers)}
      FROM ${_slonik.sql.identifier([tableName])}
      WHERE ${_slonik.sql.identifier([idName])} IN (${_slonik.sql.valueList(ids)})
    `);
  }

  const results = [];
  const targetPropertyName = (0, _lodash.camelCase)(idName);

  if (resultIsArray) {
    for (const id of ids) {
      const result = rows.filter(row => {
        return row[targetPropertyName] === id;
      });
      results.push(result);
    }
  } else {
    for (const id of ids) {
      let result = rows.find(row => {
        return row[targetPropertyName] === id;
      });

      if (!result) {
        log.warn({
          id,
          idName,
          tableName
        }, 'resource not found');
        result = new _errors.NotFoundError();
      }

      results.push(result);
    }
  }

  return results;
};

exports.default = _default;
//# sourceMappingURL=getByIds.js.map