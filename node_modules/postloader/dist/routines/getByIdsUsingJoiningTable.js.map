{"version":3,"sources":["../../src/routines/getByIdsUsingJoiningTable.js"],"names":["connection","joiningTableName","targetResourceTableName","joiningKeyName","lookupKeyName","identifiers","ids","rows","length","any","sql","identifier","raw","valueList","results","id","result","filter","row","POSTLOADER_LOOKUP_KEY","push"],"mappings":";;;;;;;AAEA;;eAOe,OACbA,UADa,EAEbC,gBAFa,EAGbC,uBAHa,EAIbC,cAJa,EAKbC,aALa,EAMbC,WANa,EAObC,GAPa,KAQoB;AACjC,MAAIC,IAAI,GAAG,EAAX;;AAEA,MAAID,GAAG,CAACE,MAAJ,GAAa,CAAjB,EAAoB;AAClBD,IAAAA,IAAI,GAAG,MAAMP,UAAU,CAACS,GAAX,CAAeC,WAAI;;UAE1BA,YAAIC,UAAJ,CAAe,CAAC,IAAD,EAAOP,aAAa,GAAG,KAAvB,CAAf,CAA8C;UAC9CM,YAAIE,GAAJ,CAAQP,WAAR,CAAqB;aAClBK,YAAIC,UAAJ,CAAe,CAACV,gBAAD,CAAf,CAAmC;mBAC7BS,YAAIC,UAAJ,CAAe,CAACT,uBAAD,CAAf,CAA0C,kBAAiBQ,YAAIC,UAAJ,CAAe,CAAC,IAAD,EAAOR,cAAc,GAAG,KAAxB,CAAf,CAA+C;cAC/GO,YAAIC,UAAJ,CAAe,CAAC,IAAD,EAAOP,aAAa,GAAG,KAAvB,CAAf,CAA8C,QAAOM,YAAIG,SAAJ,CAAcP,GAAd,CAAmB;KANrE,CAAb;AAQD;;AAED,QAAMQ,OAAO,GAAG,EAAhB;;AAEA,OAAK,MAAMC,EAAX,IAAiBT,GAAjB,EAAsB;AACpB,UAAMU,MAAM,GAAGT,IAAI,CAACU,MAAL,CAAaC,GAAD,IAAS;AAClC,aAAOA,GAAG,CAACC,qBAAJ,KAA8BJ,EAArC;AACD,KAFc,CAAf;AAIAD,IAAAA,OAAO,CAACM,IAAR,CAAaJ,MAAb;AACD;;AAED,SAAOF,OAAP;AACD,C","sourcesContent":["// @flow\n\nimport {\n  sql\n} from 'slonik';\nimport type {\n  DatabaseConnectionType\n} from '../types';\n\nexport default async (\n  connection: DatabaseConnectionType,\n  joiningTableName: string,\n  targetResourceTableName: string,\n  joiningKeyName: string,\n  lookupKeyName: string,\n  identifiers: string,\n  ids: $ReadOnlyArray<string | number>\n): Promise<$ReadOnlyArray<any>> => {\n  let rows = [];\n\n  if (ids.length > 0) {\n    rows = await connection.any(sql`\n      SELECT\n        ${sql.identifier(['r1', lookupKeyName + '_id'])} \"POSTLOADER_LOOKUP_KEY\",\n        ${sql.raw(identifiers)}\n      FROM ${sql.identifier([joiningTableName])} r1\n      INNER JOIN ${sql.identifier([targetResourceTableName])} r2 ON r2.id = ${sql.identifier(['r1', joiningKeyName + '_id'])}\n      WHERE ${sql.identifier(['r1', lookupKeyName + '_id'])} IN (${sql.valueList(ids)})\n    `);\n  }\n\n  const results = [];\n\n  for (const id of ids) {\n    const result = rows.filter((row) => {\n      return row.POSTLOADER_LOOKUP_KEY === id;\n    });\n\n    results.push(result);\n  }\n\n  return results;\n};\n"],"file":"getByIdsUsingJoiningTable.js"}