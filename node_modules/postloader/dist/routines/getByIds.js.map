{"version":3,"sources":["../../src/routines/getByIds.js"],"names":["log","Logger","child","namespace","connection","tableName","ids","idName","identifiers","resultIsArray","rows","length","any","sql","raw","identifier","valueList","results","targetPropertyName","id","result","filter","row","push","find","warn","NotFoundError"],"mappings":";;;;;;;AAEA;;AAGA;;AAGA;;AACA;;;;AAOA,MAAMA,GAAG,GAAGC,gBAAOC,KAAP,CAAa;AACvBC,EAAAA,SAAS,EAAE;AADY,CAAb,CAAZ;;eAIe,OACbC,UADa,EAEbC,SAFa,EAGbC,GAHa,EAIbC,MAAc,GAAG,IAJJ,EAKbC,WALa,EAMbC,aANa,KAOoB;AACjC,MAAIC,IAAI,GAAG,EAAX;;AAEA,MAAIJ,GAAG,CAACK,MAAJ,GAAa,CAAjB,EAAoB;AAClBD,IAAAA,IAAI,GAAG,MAAMN,UAAU,CAACQ,GAAX,CAAeC,WAAI;eACrBA,YAAIC,GAAJ,CAAQN,WAAR,CAAqB;aACvBK,YAAIE,UAAJ,CAAe,CAACV,SAAD,CAAf,CAA4B;cAC3BQ,YAAIE,UAAJ,CAAe,CAACR,MAAD,CAAf,CAAyB,QAAOM,YAAIG,SAAJ,CAAcV,GAAd,CAAmB;KAHhD,CAAb;AAKD;;AAED,QAAMW,OAAO,GAAG,EAAhB;AAEA,QAAMC,kBAAkB,GAAG,uBAAUX,MAAV,CAA3B;;AAEA,MAAIE,aAAJ,EAAmB;AACjB,SAAK,MAAMU,EAAX,IAAiBb,GAAjB,EAAsB;AACpB,YAAMc,MAAM,GAAGV,IAAI,CAACW,MAAL,CAAaC,GAAD,IAAS;AAClC,eAAOA,GAAG,CAACJ,kBAAD,CAAH,KAA4BC,EAAnC;AACD,OAFc,CAAf;AAIAF,MAAAA,OAAO,CAACM,IAAR,CAAaH,MAAb;AACD;AACF,GARD,MAQO;AACL,SAAK,MAAMD,EAAX,IAAiBb,GAAjB,EAAsB;AACpB,UAAIc,MAAM,GAAGV,IAAI,CAACc,IAAL,CAAWF,GAAD,IAAS;AAC9B,eAAOA,GAAG,CAACJ,kBAAD,CAAH,KAA4BC,EAAnC;AACD,OAFY,CAAb;;AAIA,UAAI,CAACC,MAAL,EAAa;AACXpB,QAAAA,GAAG,CAACyB,IAAJ,CAAS;AACPN,UAAAA,EADO;AAEPZ,UAAAA,MAFO;AAGPF,UAAAA;AAHO,SAAT,EAIG,oBAJH;AAMAe,QAAAA,MAAM,GAAG,IAAIM,qBAAJ,EAAT;AACD;;AAEDT,MAAAA,OAAO,CAACM,IAAR,CAAaH,MAAb;AACD;AACF;;AAED,SAAOH,OAAP;AACD,C","sourcesContent":["// @flow\n\nimport {\n  sql\n} from 'slonik';\nimport {\n  camelCase\n} from 'lodash';\nimport Logger from '../Logger';\nimport {\n  NotFoundError\n} from '../errors';\nimport type {\n  DatabaseConnectionType\n} from '../types';\n\nconst log = Logger.child({\n  namespace: 'getByIds'\n});\n\nexport default async (\n  connection: DatabaseConnectionType,\n  tableName: string,\n  ids: $ReadOnlyArray<string | number>,\n  idName: string = 'id',\n  identifiers: string,\n  resultIsArray: boolean\n): Promise<$ReadOnlyArray<any>> => {\n  let rows = [];\n\n  if (ids.length > 0) {\n    rows = await connection.any(sql`\n      SELECT ${sql.raw(identifiers)}\n      FROM ${sql.identifier([tableName])}\n      WHERE ${sql.identifier([idName])} IN (${sql.valueList(ids)})\n    `);\n  }\n\n  const results = [];\n\n  const targetPropertyName = camelCase(idName);\n\n  if (resultIsArray) {\n    for (const id of ids) {\n      const result = rows.filter((row) => {\n        return row[targetPropertyName] === id;\n      });\n\n      results.push(result);\n    }\n  } else {\n    for (const id of ids) {\n      let result = rows.find((row) => {\n        return row[targetPropertyName] === id;\n      });\n\n      if (!result) {\n        log.warn({\n          id,\n          idName,\n          tableName\n        }, 'resource not found');\n\n        result = new NotFoundError();\n      }\n\n      results.push(result);\n    }\n  }\n\n  return results;\n};\n"],"file":"getByIds.js"}