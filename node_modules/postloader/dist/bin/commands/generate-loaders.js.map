{"version":3,"sources":["../../../src/bin/commands/generate-loaders.js"],"names":["command","desc","builder","yargs","options","description","type","demand","handler","argv","filterColumn","columnFilter","Function","mapTableName","tableNameMapper","dataTypeMap","JSON","parse","pool","databaseConnectionUri","columns","normalizedColumns","filter","column","tableName","name","map","isNullable","comment","includes","mappedTableName","indexes","console","log"],"mappings":";;;;;;;AAEA;;AAOA;;AAIA;;;;;;AAcO,MAAMA,OAAO,GAAG,kBAAhB;;AACA,MAAMC,IAAI,GAAG,EAAb;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAyB;AAC9CA,EAAAA,KAAK,CACFC,OADH,CACW;AACP,qBAAiB;AACfC,MAAAA,WAAW,EAAE,wRADE;AAEfC,MAAAA,IAAI,EAAE;AAFS,KADV;AAKP,qBAAiB;AACfD,MAAAA,WAAW,EAAE,gHADE;AAEfC,MAAAA,IAAI,EAAE;AAFS,KALV;AASP,+BAA2B;AACzBC,MAAAA,MAAM,EAAE;AADiB,KATpB;AAYP,yBAAqB;AACnBF,MAAAA,WAAW,EAAE,uOADM;AAEnBC,MAAAA,IAAI,EAAE;AAFa;AAZd,GADX;AAkBD,CAnBM;;;;AAqBA,MAAME,OAAO,GAAG,MAAOC,IAAP,IAAyC;AAC9D;AACA,QAAMC,YAA8B,GAAID,IAAI,CAACE,YAAL,GAAoB,IAAIC,QAAJ,CAAa,WAAb,EAA0B,YAA1B,EAAwC,SAAxC,EAAmDH,IAAI,CAACE,YAAxD,CAApB,GAA4F,IAApI,CAF8D,CAI9D;;AACA,QAAME,YAAiC,GAAIJ,IAAI,CAACK,eAAL,GAAuB,IAAIF,QAAJ,CAAa,WAAb,EAA0B,SAA1B,EAAqCH,IAAI,CAACK,eAA1C,CAAvB,GAAoF,IAA/H;AAEA,QAAMC,WAA4B,GAAGN,IAAI,CAACM,WAAL,GAAmBC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACM,WAAhB,CAAnB,GAAkD,EAAvF;AAEA,QAAMG,IAAI,GAAG,MAAM,wBAAWT,IAAI,CAACU,qBAAhB,CAAnB;AAEA,QAAMC,OAAO,GAAG,MAAM,iCAAmBF,IAAnB,CAAtB;AAEA,QAAMG,iBAAiB,GAAGD,OAAO,CAC9BE,MADuB,CACfC,MAAD,IAAY;AAClB,QAAI,CAACb,YAAL,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,WAAOA,YAAY,CAACa,MAAM,CAACC,SAAR,EAAmBD,MAAM,CAACE,IAA1B,EAAgCL,OAAhC,CAAnB;AACD,GAPuB,EAQvBM,GARuB,CAQlBH,MAAD,IAAY;AACf,6BACKA,MADL;AAEEI,MAAAA,UAAU,EAAEJ,MAAM,CAACK,OAAP,IAAkBL,MAAM,CAACK,OAAP,CAAeC,QAAf,CAAwB,kBAAxB,CAAlB,GAAgE,KAAhE,GAAwEN,MAAM,CAACI;AAF7F;AAID,GAbuB,EAcvBD,GAduB,CAclBH,MAAD,IAAY;AACf,QAAI,CAACV,YAAL,EAAmB;AACjB,aAAOU,MAAP;AACD;;AAED,6BACKA,MADL;AAEEO,MAAAA,eAAe,EAAEjB,YAAY,CAACU,MAAM,CAACC,SAAR,EAAmBJ,OAAnB;AAF/B;AAID,GAvBuB,CAA1B;AAyBA,QAAMW,OAAO,GAAG,MAAM,iCAAmBb,IAAnB,CAAtB,CAtC8D,CAwC9D;;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAY,0CAA0BZ,iBAA1B,EAA6CU,OAA7C,EAAsDhB,WAAtD,CAAZ;AACD,CA1CM","sourcesContent":["// @flow\n\nimport {\n  createPool\n} from 'slonik';\nimport type {\n  ColumnType,\n  DataTypeMapType\n} from '../../types';\nimport {\n  getDatabaseColumns,\n  getDatabaseIndexes\n} from '../../queries';\nimport {\n  generateDataLoaderFactory\n} from '../../utilities';\n\ntype ArgvType = {|\n  +columnFilter?: string,\n  +dataTypeMap?: string,\n  +databaseConnectionUri: string,\n  +tableNameMapper?: string\n|};\n\ntype ColumnFilterType = (tableName: string, columnName: string, columns: $ReadOnlyArray<ColumnType>) => boolean;\ntype TableNameMapperType = (tableName: string, columns: $ReadOnlyArray<ColumnType>) => string;\n\nexport const command = 'generate-loaders';\nexport const desc = '';\n\nexport const builder = (yargs: Object): void => {\n  yargs\n    .options({\n      'column-filter': {\n        description: 'Function used to filter columns. Function is constructed using `new Function`. Function receives table name as the first parameter, column name as the second parameter and all database columns as the third parameter (parameter names are \"tableName\", \"columnName\" and \"columns\").',\n        type: 'string'\n      },\n      'data-type-map': {\n        description: 'A JSON string describing an object mapping user-defined database types to Flow types, e.g. {\"email\": \"string\"}',\n        type: 'string'\n      },\n      'database-connection-uri': {\n        demand: true\n      },\n      'table-name-mapper': {\n        description: 'Function used to map table names. Function is constructed using `new Function`. Function receives table name as the first parameter and all database columns as the second parameter (parameter names are \"tableName\" and \"columns\").',\n        type: 'string'\n      }\n    });\n};\n\nexport const handler = async (argv: ArgvType): Promise<void> => {\n  // eslint-disable-next-line no-extra-parens, no-new-func\n  const filterColumn: ColumnFilterType = (argv.columnFilter ? new Function('tableName', 'columnName', 'columns', argv.columnFilter) : null: any);\n\n  // eslint-disable-next-line no-extra-parens, no-new-func\n  const mapTableName: TableNameMapperType = (argv.tableNameMapper ? new Function('tableName', 'columns', argv.tableNameMapper) : null: any);\n\n  const dataTypeMap: DataTypeMapType = argv.dataTypeMap ? JSON.parse(argv.dataTypeMap) : {};\n\n  const pool = await createPool(argv.databaseConnectionUri);\n\n  const columns = await getDatabaseColumns(pool);\n\n  const normalizedColumns = columns\n    .filter((column) => {\n      if (!filterColumn) {\n        return true;\n      }\n\n      return filterColumn(column.tableName, column.name, columns);\n    })\n    .map((column) => {\n      return {\n        ...column,\n        isNullable: column.comment && column.comment.includes('POSTLOAD_NOTNULL') ? false : column.isNullable\n      };\n    })\n    .map((column) => {\n      if (!mapTableName) {\n        return column;\n      }\n\n      return {\n        ...column,\n        mappedTableName: mapTableName(column.tableName, columns)\n      };\n    });\n\n  const indexes = await getDatabaseIndexes(pool);\n\n  // eslint-disable-next-line no-console\n  console.log(generateDataLoaderFactory(normalizedColumns, indexes, dataTypeMap));\n};\n"],"file":"generate-loaders.js"}