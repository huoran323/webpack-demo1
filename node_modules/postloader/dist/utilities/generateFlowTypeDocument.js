"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _getFlowType = _interopRequireDefault(require("./getFlowType"));

var _formatTypeName = _interopRequireDefault(require("./formatTypeName"));

var _formatPropertyName = _interopRequireDefault(require("./formatPropertyName"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const generateFlowTypeDeclarationBody = (columns, dataTypeMap = {}) => {
  const sortedColumns = (0, _lodash.sortBy)(columns, 'column_name');
  const propertyDeclarations = [];

  for (const column of sortedColumns) {
    const propertyDataType = dataTypeMap[column.dataType] ? (0, _getFlowType.default)(dataTypeMap[column.dataType]) : (0, _getFlowType.default)(column.dataType);
    propertyDeclarations.push('+' + (0, _formatPropertyName.default)(column.name) + ': ' + propertyDataType + (column.isNullable ? ' | null' : ''));
  }

  return propertyDeclarations.join('\n');
};

var _default = (unnormalisedColumns, dataTypeMap = {}) => {
  const columns = unnormalisedColumns.map(column => {
    return _objectSpread({}, column, {
      mappedTableName: column.mappedTableName || column.tableName
    });
  });
  const tableNames = columns.map(column => {
    return column.mappedTableName || column.tableName;
  }).filter((tableName, index, self) => {
    return self.indexOf(tableName) === index;
  });
  const typeDeclarations = [];

  for (const tableName of tableNames) {
    const tableColumns = columns.filter(column => {
      return column.mappedTableName === tableName;
    });
    const typeName = (0, _formatTypeName.default)(tableName);
    const typeDeclaration = `
type ${typeName} = {|
  ${generateFlowTypeDeclarationBody(tableColumns, dataTypeMap).split('\n').sort().join(',\n  ')}
|};`;
    typeDeclarations.push(typeDeclaration);
  }

  const exportedTypes = tableNames.map(tableName => {
    return (0, _formatTypeName.default)(tableName);
  }).sort().join(',\n  ');
  return typeDeclarations.join('\n') + `\n
export type {
  ${exportedTypes}
};`;
};

exports.default = _default;
//# sourceMappingURL=generateFlowTypeDocument.js.map