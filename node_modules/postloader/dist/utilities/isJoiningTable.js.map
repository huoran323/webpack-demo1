{"version":3,"sources":["../../src/utilities/isJoiningTable.js"],"names":["tableName","columns","firstIdColumnNames","map","column","name","filter","columnName","endsWith","slice","sort","length","join"],"mappings":";;;;;;;eAMe,CAACA,SAAD,EAAoBC,OAApB,KAAqE;AAClF,QAAMC,kBAAkB,GAAGD,OAAO,CAC/BE,GADwB,CACnBC,MAAD,IAAY;AACf,WAAOA,MAAM,CAACC,IAAd;AACD,GAHwB,EAIxBC,MAJwB,CAIhBC,UAAD,IAAgB;AACtB,WAAOA,UAAU,CAACC,QAAX,CAAoB,KAApB,CAAP;AACD,GANwB,EAOxBL,GAPwB,CAOnBI,UAAD,IAAgB;AACnB,WAAOA,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAP;AACD,GATwB,EAUxBA,KAVwB,CAUlB,CAVkB,EAUf,CAVe,EAWxBC,IAXwB,EAA3B;;AAaA,MAAIR,kBAAkB,CAACS,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,WAAO,KAAP;AACD;;AAED,SAAOT,kBAAkB,CAACU,IAAnB,CAAwB,GAAxB,MAAiCZ,SAAxC;AACD,C","sourcesContent":["// @flow\n\nimport type {\n  ColumnType\n} from '../types';\n\nexport default (tableName: string, columns: $ReadOnlyArray<ColumnType>): boolean => {\n  const firstIdColumnNames = columns\n    .map((column) => {\n      return column.name;\n    })\n    .filter((columnName) => {\n      return columnName.endsWith('_id');\n    })\n    .map((columnName) => {\n      return columnName.slice(0, -3);\n    })\n    .slice(0, 2)\n    .sort();\n\n  if (firstIdColumnNames.length < 2) {\n    return false;\n  }\n\n  return firstIdColumnNames.join('_') === tableName;\n};\n"],"file":"isJoiningTable.js"}