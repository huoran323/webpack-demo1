{"version":3,"sources":["../../src/utilities/generateDataLoaderFactory.js"],"names":["log","Logger","child","namespace","createLoaderByIdsDeclaration","loaderName","tableName","keyColumnName","columnSelector","resultIsArray","String","createLoaderByIdsUsingJoiningTableDeclaration","joiningTableName","targetResourceTableName","joiningKeyName","lookupKeyName","unnormalisedColumns","indexes","dataTypeMap","columns","map","column","mappedTableName","length","UnexpectedStateError","tableNames","filter","index","self","indexOf","loaders","loaderNames","loaderTypes","tableColumns","resouceName","tableColumn","tableColumnSelector","name","endsWith","push","loaderType","dataType","tableUniqueIndexes","indexIsUnique","columnNames","tableUniqueIndex","maybeIndexColumnName","Error","indexColumn","find","firstIdColumnNames","columnName","slice","relations","key","resource","relation","includes","resourceTableColumns","warn","realResourceTableName","keyColumn","sort","a","b","localeCompare","body","join"],"mappings":"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","sourcesContent":["// @flow\n\nimport pluralize from 'pluralize';\nimport {\n  camelCase,\n  upperFirst\n} from 'lodash';\nimport type {\n  ColumnType,\n  DataTypeMapType,\n  IndexType\n} from '../types';\nimport {\n  UnexpectedStateError\n} from '../errors';\nimport Logger from '../Logger';\nimport generateFlowTypeDocument from './generateFlowTypeDocument';\nimport indent from './indent';\nimport isJoiningTable from './isJoiningTable';\nimport createColumnSelector from './createColumnSelector';\nimport createLoaderTypePropertyDeclaration from './createLoaderTypePropertyDeclaration';\nimport pluralizeTableName from './pluralizeTableName';\n\nconst log = Logger.child({\n  namespace: 'generateDataLoaderFactory'\n});\n\nconst createLoaderByIdsDeclaration = (loaderName: string, tableName: string, keyColumnName, columnSelector: string, resultIsArray: boolean) => {\n  return `const ${loaderName} = new DataLoader((ids) => {\n  return getByIds(connection, '${tableName}', ids, '${keyColumnName}', '${columnSelector}', ${String(resultIsArray)}, NotFoundError);\n});`;\n};\n\nconst createLoaderByIdsUsingJoiningTableDeclaration = (\n  loaderName: string,\n  joiningTableName: string,\n  targetResourceTableName: string,\n  joiningKeyName: string,\n  lookupKeyName: string,\n  columnSelector: string\n) => {\n  return `const ${loaderName} = new DataLoader((ids) => {\n  return getByIdsUsingJoiningTable(connection, '${joiningTableName}', '${targetResourceTableName}', '${joiningKeyName}', '${lookupKeyName}', '${columnSelector}', ids);\n});`;\n};\n\n// eslint-disable-next-line complexity\nexport default (\n  unnormalisedColumns: $ReadOnlyArray<ColumnType>,\n  indexes: $ReadOnlyArray<IndexType>,\n  dataTypeMap: DataTypeMapType,\n): string => {\n  const columns = unnormalisedColumns\n    .map((column) => {\n      return {\n        ...column,\n        mappedTableName: column.mappedTableName || column.tableName\n      };\n    });\n\n  if (columns.length === 0) {\n    throw new UnexpectedStateError('Must know multiple columns.');\n  }\n\n  const tableNames = columns\n    .map((column) => {\n      return column.tableName;\n    })\n    .filter((tableName, index, self) => {\n      return self.indexOf(tableName) === index;\n    });\n\n  const loaders = [];\n  const loaderNames = [];\n  const loaderTypes = [];\n\n  for (const tableName of tableNames) {\n    const tableColumns = columns.filter((column) => {\n      return column.tableName === tableName;\n    });\n\n    if (tableColumns.length === 0) {\n      continue;\n    }\n\n    const mappedTableName = tableColumns[0].mappedTableName;\n\n    const resouceName = upperFirst(camelCase(mappedTableName));\n\n    for (const tableColumn of tableColumns) {\n      const tableColumnSelector = createColumnSelector(tableColumns);\n\n      if (tableColumn.name.endsWith('_id')) {\n        const loaderName = pluralize(resouceName) + 'By' + upperFirst(camelCase(tableColumn.name)) + 'Loader';\n\n        loaders.push(createLoaderByIdsDeclaration(loaderName, tableName, tableColumn.name, tableColumnSelector, true));\n\n        const loaderType = createLoaderTypePropertyDeclaration(\n          loaderName,\n          dataTypeMap[tableColumn.dataType] ? dataTypeMap[tableColumn.dataType] : tableColumn.dataType,\n          tableColumn.mappedTableName,\n          true\n        );\n\n        loaderTypes.push(loaderType);\n\n        loaderNames.push(loaderName);\n      }\n    }\n\n    const tableUniqueIndexes = indexes.filter((index) => {\n      return index.tableName === tableName && index.indexIsUnique === true && index.columnNames.length === 1;\n    });\n\n    for (const tableUniqueIndex of tableUniqueIndexes) {\n      const tableColumnSelector = createColumnSelector(tableColumns);\n\n      const maybeIndexColumnName = tableUniqueIndex.columnNames[0];\n\n      if (!maybeIndexColumnName) {\n        throw new Error('Unexpected state.');\n      }\n\n      const indexColumn = tableColumns.find((column) => {\n        return column.name === maybeIndexColumnName;\n      });\n\n      if (!indexColumn) {\n        throw new Error('Unexpected state.');\n      }\n\n      const loaderName = resouceName + 'By' + upperFirst(camelCase(indexColumn.name)) + 'Loader';\n\n      loaders.push(createLoaderByIdsDeclaration(loaderName, tableName, indexColumn.name, tableColumnSelector, false));\n\n      const loaderType = createLoaderTypePropertyDeclaration(\n        loaderName,\n        dataTypeMap[indexColumn.dataType] ? dataTypeMap[indexColumn.dataType] : indexColumn.dataType,\n        indexColumn.mappedTableName,\n        false\n      );\n\n      loaderTypes.push(loaderType);\n\n      loaderNames.push(loaderName);\n    }\n  }\n\n  for (const tableName of tableNames) {\n    const tableColumns = columns.filter((column) => {\n      return column.tableName === tableName;\n    });\n\n    if (tableColumns.length === 0) {\n      continue;\n    }\n\n    if (!isJoiningTable(tableName, tableColumns)) {\n      continue;\n    }\n\n    const firstIdColumnNames = tableColumns\n      .map((column) => {\n        return column.name;\n      })\n      .filter((columnName) => {\n        return columnName.endsWith('_id');\n      })\n      .map((columnName) => {\n        return columnName.slice(0, -3);\n      })\n      .slice(0, 2);\n\n    if (firstIdColumnNames.length < 2) {\n      throw new Error('Unexpected state.');\n    }\n\n    const relations = [\n      {\n        key: firstIdColumnNames[0],\n        resource: firstIdColumnNames[1]\n      },\n      {\n        key: firstIdColumnNames[1],\n        resource: firstIdColumnNames[0]\n      }\n    ];\n\n    for (const relation of relations) {\n      const loaderName = upperFirst(camelCase(pluralizeTableName(relation.resource))) + 'By' + upperFirst(camelCase(relation.key + '_id')) + 'Loader';\n\n      if (loaderNames.includes(loaderName)) {\n        continue;\n      }\n\n      const resourceTableColumns = columns.filter((column) => {\n        return column.mappedTableName === relation.resource;\n      });\n\n      if (!resourceTableColumns.length) {\n        log.warn({\n          relation\n        }, 'resource without columns');\n\n        continue;\n      }\n\n      const realResourceTableName = resourceTableColumns[0].tableName;\n\n      const tableColumnSelector = createColumnSelector(resourceTableColumns, 'r2');\n\n      loaders.push(createLoaderByIdsUsingJoiningTableDeclaration(loaderName, tableName, realResourceTableName, relation.resource, relation.key, tableColumnSelector));\n\n      const keyColumn = tableColumns.find((column) => {\n        return column.name === relation.key + '_id';\n      });\n\n      if (!keyColumn) {\n        throw new Error('Unexpected state.');\n      }\n\n      const loaderType = createLoaderTypePropertyDeclaration(\n        loaderName,\n        dataTypeMap[keyColumn.dataType] ? dataTypeMap[keyColumn.dataType] : keyColumn.dataType,\n        relation.resource,\n        true\n      );\n\n      loaderTypes.push(loaderType);\n\n      loaderNames.push(loaderName);\n    }\n  }\n\n  loaderTypes.sort((a, b) => {\n    return a.localeCompare(b);\n  });\n\n  loaderNames.sort((a, b) => {\n    return a.localeCompare(b);\n  });\n\n  return `// @flow\n\nimport {\n  getByIds,\n  getByIdsUsingJoiningTable,\n  NotFoundError\n} from 'postloader';\nimport DataLoader from 'dataloader';\nimport type {\n  DatabaseConnectionType\n} from 'slonik';\n${generateFlowTypeDocument(columns, dataTypeMap)}\n\nexport type LoadersType = {|\n${loaderTypes.map((body) => {\n    return indent(body, 2);\n  }).sort().join(',\\n')}\n|};\n\nexport const createLoaders = (connection: DatabaseConnectionType): LoadersType => {\n${loaders\n    .map((body) => {\n      return indent(body, 2);\n    })\n    .join('\\n')}\n\n  return {\n${loaderNames\n    .map((body) => {\n      return indent(body, 4);\n    })\n    .join(',\\n')}\n  };\n};`;\n};\n"],"file":"generateDataLoaderFactory.js"}