{"version":3,"sources":["../../src/templateTags/sql.js"],"names":["log","Logger","child","namespace","sql","parts","values","rawSql","parameterValues","index","appendSqlFragment","sqlFragment","push","part","token","length","type","SqlTokenSymbol","RawSqlTokenSymbol","IdentifierTokenSymbol","IdentifierListTokenSymbol","ArrayTokenSymbol","ValueListTokenSymbol","TupleTokenSymbol","TupleListTokenSymbol","UnnestTokenSymbol","error","constructedSql","offendingToken","TypeError","query","identifier","names","identifierList","identifiers","raw","valueList","array","memberType","tuple","tupleList","tuples","unnest","columnTypes"],"mappings":"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","sourcesContent":["// @flow\n\nimport type {\n  ArraySqlTokenType,\n  IdentifierListMemberType,\n  IdentifierListTokenType,\n  IdentifierTokenType,\n  PrimitiveValueExpressionType,\n  RawSqlTokenType,\n  SqlFragmentType,\n  SqlSqlTokenType,\n  SqlTaggedTemplateType,\n  TupleListSqlTokenType,\n  TupleSqlTokenType,\n  UnnestSqlTokenType,\n  ValueExpressionType,\n  ValueListSqlTokenType\n} from '../types';\nimport {\n  deepFreeze,\n  isPrimitiveValueExpression\n} from '../utilities';\nimport Logger from '../Logger';\nimport {\n  createArraySqlFragment,\n  createIdentifierSqlFragment,\n  createIdentifierListSqlFragment,\n  createRawSqlSqlFragment,\n  createSqlSqlFragment,\n  createTupleListSqlFragment,\n  createTupleSqlFragment,\n  createUnnestSqlFragment,\n  createValueListSqlFragment\n} from '../sqlFragmentFactories';\nimport {\n  ArrayTokenSymbol,\n  SqlTokenSymbol,\n  RawSqlTokenSymbol,\n  IdentifierTokenSymbol,\n  IdentifierListTokenSymbol,\n  ValueListTokenSymbol,\n  TupleTokenSymbol,\n  TupleListTokenSymbol,\n  UnnestTokenSymbol\n} from '../symbols';\n\nconst log = Logger.child({\n  namespace: 'sql'\n});\n\n/* eslint-disable complexity */\n// $FlowFixMe\nconst sql: SqlTaggedTemplateType = (\n  parts: $ReadOnlyArray<string>,\n  ...values: $ReadOnlyArray<ValueExpressionType>\n): SqlSqlTokenType => {\n  let rawSql = '';\n\n  const parameterValues = [];\n\n  let index = 0;\n\n  const appendSqlFragment = (sqlFragment: SqlFragmentType) => {\n    rawSql += sqlFragment.sql;\n    parameterValues.push(...sqlFragment.values);\n  };\n\n  for (const part of parts) {\n    const token = values[index++];\n\n    rawSql += part;\n\n    if (index >= parts.length) {\n      continue;\n    }\n\n    if (isPrimitiveValueExpression(token)) {\n      rawSql += '$' + (parameterValues.length + 1);\n\n      parameterValues.push(token);\n    } else if (token && token.type === SqlTokenSymbol) {\n      // @see https://github.com/gajus/slonik/issues/36 regarding FlowFixMe use.\n      // $FlowFixMe\n      appendSqlFragment(createSqlSqlFragment(token, parameterValues.length));\n    } else if (token && token.type === RawSqlTokenSymbol) {\n      // $FlowFixMe\n      appendSqlFragment(createRawSqlSqlFragment(token, parameterValues.length));\n    } else if (token && token.type === IdentifierTokenSymbol) {\n      // $FlowFixMe\n      appendSqlFragment(createIdentifierSqlFragment(token));\n    } else if (token && token.type === IdentifierListTokenSymbol) {\n      // $FlowFixMe\n      appendSqlFragment(createIdentifierListSqlFragment(token));\n    } else if (token && token.type === ArrayTokenSymbol) {\n      // $FlowFixMe\n      appendSqlFragment(createArraySqlFragment(token, parameterValues.length));\n    } else if (token && token.type === ValueListTokenSymbol) {\n      // $FlowFixMe\n      appendSqlFragment(createValueListSqlFragment(token, parameterValues.length));\n    } else if (token && token.type === TupleTokenSymbol) {\n      // $FlowFixMe\n      appendSqlFragment(createTupleSqlFragment(token, parameterValues.length));\n    } else if (token && token.type === TupleListTokenSymbol) {\n      // $FlowFixMe\n      appendSqlFragment(createTupleListSqlFragment(token, parameterValues.length));\n    } else if (token && token.type === UnnestTokenSymbol) {\n      // $FlowFixMe\n      appendSqlFragment(createUnnestSqlFragment(token, parameterValues.length));\n    } else {\n      log.error({\n        constructedSql: rawSql,\n        offendingToken: token\n      }, 'unexpected value expression');\n\n      throw new TypeError('Unexpected value expression.');\n    }\n  }\n\n  const query = deepFreeze({\n    sql: rawSql,\n    type: SqlTokenSymbol,\n    values: parameterValues\n  });\n\n  return query;\n};\n\nsql.identifier = (\n  names: $ReadOnlyArray<string>\n): IdentifierTokenType => {\n  // @todo Replace `type` with a symbol once Flow adds symbol support\n  // @see https://github.com/facebook/flow/issues/810\n  return deepFreeze({\n    names,\n    type: IdentifierTokenSymbol\n  });\n};\n\nsql.identifierList = (\n  identifiers: $ReadOnlyArray<IdentifierListMemberType>\n): IdentifierListTokenType => {\n  return deepFreeze({\n    identifiers,\n    type: IdentifierListTokenSymbol\n  });\n};\n\nsql.raw = (\n  rawSql: string,\n  values?: $ReadOnlyArray<PrimitiveValueExpressionType>\n): RawSqlTokenType => {\n  return deepFreeze({\n    sql: rawSql,\n    type: RawSqlTokenSymbol,\n    values: values || []\n  });\n};\n\nsql.valueList = (\n  values: $ReadOnlyArray<PrimitiveValueExpressionType>\n): ValueListSqlTokenType => {\n  return deepFreeze({\n    type: ValueListTokenSymbol,\n    values\n  });\n};\n\nsql.array = (\n  values: $ReadOnlyArray<PrimitiveValueExpressionType>,\n  memberType: string\n): ArraySqlTokenType => {\n  return deepFreeze({\n    memberType,\n    type: ArrayTokenSymbol,\n    values\n  });\n};\n\nsql.tuple = (\n  values: $ReadOnlyArray<PrimitiveValueExpressionType>\n): TupleSqlTokenType => {\n  return deepFreeze({\n    type: TupleTokenSymbol,\n    values\n  });\n};\n\nsql.tupleList = (\n  tuples: $ReadOnlyArray<$ReadOnlyArray<PrimitiveValueExpressionType>>\n): TupleListSqlTokenType => {\n  return deepFreeze({\n    tuples,\n    type: TupleListTokenSymbol\n  });\n};\n\nsql.unnest = (\n  tuples: $ReadOnlyArray<$ReadOnlyArray<PrimitiveValueExpressionType>>,\n  columnTypes: $ReadOnlyArray<string>\n): UnnestSqlTokenType => {\n  return deepFreeze({\n    columnTypes,\n    tuples,\n    type: UnnestTokenSymbol\n  });\n};\n\nexport default sql;\n"],"file":"sql.js"}