{"version":3,"sources":["../../src/sqlFragmentFactories/createUnnestSqlFragment.js"],"names":["token","greatestParameterPosition","columnTypes","values","unnestBindings","unnestSqlTokens","columnIndex","placeholderIndex","length","columnType","push","repeat","lastTupleSize","tupleValues","tuples","Error","tupleColumnIndex","tupleValue","sql","join"],"mappings":";;;;;;;AAMA;;iCAMgBA,K,EAA2BC,yB,KAAuD;AAChG,QAAMC,WAAW,GAAGF,KAAK,CAACE,WAA1B;AAEA,QAAMC,MAAM,GAAG,EAAf;AAEA,QAAMC,cAAc,GAAG,EAAvB;AACA,QAAMC,eAAe,GAAG,EAAxB;AAEA,MAAIC,WAAW,GAAG,CAAlB;AAEA,MAAIC,gBAAgB,GAAGN,yBAAvB;;AAEA,SAAOK,WAAW,GAAGJ,WAAW,CAACM,MAAjC,EAAyC;AACvC,UAAMC,UAAU,GAAGP,WAAW,CAACI,WAAD,CAA9B;AAEAD,IAAAA,eAAe,CAACK,IAAhB,CAAqB,MAAM,EAAEH,gBAAR,GAA2B,IAA3B,GAAkC,iCAAiB,mCAAmBE,UAAnB,CAAjB,CAAlC,GAAqF,KAAKE,MAAL,CAAY,qCAAqBF,UAArB,IAAmC,CAA/C,CAA1G;AAEAL,IAAAA,cAAc,CAACE,WAAD,CAAd,GAA8B,EAA9B;AAEAA,IAAAA,WAAW;AACZ;;AAED,MAAIM,aAAJ;;AAEA,OAAK,MAAMC,WAAX,IAA0Bb,KAAK,CAACc,MAAhC,EAAwC;AACtC,QAAI,OAAOF,aAAP,KAAyB,QAAzB,IAAqCA,aAAa,KAAKC,WAAW,CAACL,MAAvE,EAA+E;AAC7E,YAAM,IAAIO,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAED,QAAIF,WAAW,CAACL,MAAZ,KAAuBN,WAAW,CAACM,MAAvC,EAA+C;AAC7C,YAAM,IAAIO,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAEDH,IAAAA,aAAa,GAAGC,WAAW,CAACL,MAA5B;AAEA,QAAIQ,gBAAgB,GAAG,CAAvB;;AAEA,SAAK,MAAMC,UAAX,IAAyBJ,WAAzB,EAAsC;AACpCT,MAAAA,cAAc,CAACY,gBAAgB,EAAjB,CAAd,CAAmCN,IAAnC,CAAwCO,UAAxC;AACD;AACF;;AAEDd,EAAAA,MAAM,CAACO,IAAP,CAAY,GAAGN,cAAf;AAEA,QAAMc,GAAG,GAAG,YAAYb,eAAe,CAACc,IAAhB,CAAqB,IAArB,CAAZ,GAAyC,GAArD;AAEA,SAAO;AACLD,IAAAA,GADK;AAELf,IAAAA;AAFK,GAAP;AAID,C","sourcesContent":["// @flow\n\nimport type {\n  SqlFragmentType,\n  UnnestSqlTokenType\n} from '../types';\nimport {\n  countArrayDimensions,\n  escapeIdentifier,\n  stripArrayNotation\n} from '../utilities';\n\nexport default (token: UnnestSqlTokenType, greatestParameterPosition: number): SqlFragmentType => {\n  const columnTypes = token.columnTypes;\n\n  const values = [];\n\n  const unnestBindings = [];\n  const unnestSqlTokens = [];\n\n  let columnIndex = 0;\n\n  let placeholderIndex = greatestParameterPosition;\n\n  while (columnIndex < columnTypes.length) {\n    const columnType = columnTypes[columnIndex];\n\n    unnestSqlTokens.push('$' + ++placeholderIndex + '::' + escapeIdentifier(stripArrayNotation(columnType)) + '[]'.repeat(countArrayDimensions(columnType) + 1));\n\n    unnestBindings[columnIndex] = [];\n\n    columnIndex++;\n  }\n\n  let lastTupleSize;\n\n  for (const tupleValues of token.tuples) {\n    if (typeof lastTupleSize === 'number' && lastTupleSize !== tupleValues.length) {\n      throw new Error('Each tuple in a list of tuples must have an equal number of members.');\n    }\n\n    if (tupleValues.length !== columnTypes.length) {\n      throw new Error('Column types length must match tuple member length.');\n    }\n\n    lastTupleSize = tupleValues.length;\n\n    let tupleColumnIndex = 0;\n\n    for (const tupleValue of tupleValues) {\n      unnestBindings[tupleColumnIndex++].push(tupleValue);\n    }\n  }\n\n  values.push(...unnestBindings);\n\n  const sql = 'unnest(' + unnestSqlTokens.join(', ') + ')';\n\n  return {\n    sql,\n    values\n  };\n};\n"],"file":"createUnnestSqlFragment.js"}