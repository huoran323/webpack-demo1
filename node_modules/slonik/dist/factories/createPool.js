"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pg = _interopRequireDefault(require("pg"));

var _serializeError = _interopRequireDefault(require("serialize-error"));

var _pgConnectionString = require("pg-connection-string");

var _utilities = require("../utilities");

var _Logger = _interopRequireDefault(require("../Logger"));

var _bindPool = _interopRequireDefault(require("../binders/bindPool"));

var _createClientConfiguration = _interopRequireDefault(require("./createClientConfiguration"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param connectionUri PostgreSQL [Connection URI](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING).
 */
const createPool = (connectionUri, clientUserConfiguration) => {
  const clientConfiguration = (0, _createClientConfiguration.default)(clientUserConfiguration);
  const poolId = (0, _utilities.createUlid)();

  const poolLog = _Logger.default.child({
    poolId
  });

  const poolConfiguration = (0, _pgConnectionString.parse)(connectionUri);

  if (clientConfiguration.connectionTimeout) {
    poolConfiguration.connectionTimeoutMillis = clientConfiguration.connectionTimeout;
  }

  if (clientConfiguration.idleTimeout) {
    poolConfiguration.idleTimeoutMillis = clientConfiguration.idleTimeout;
  }

  if (clientConfiguration.maximumPoolSize) {
    poolConfiguration.max = clientConfiguration.maximumPoolSize;
  }

  if (clientConfiguration.minimumPoolSize) {
    poolConfiguration.min = clientConfiguration.minimumPoolSize;
  }

  const pool = new _pg.default.Pool(poolConfiguration);
  pool.slonik = {
    poolId
  }; // istanbul ignore next

  pool.on('error', error => {
    if (error.client.connection.slonik.terminated !== true) {
      poolLog.error({
        error: (0, _serializeError.default)(error)
      }, 'client connection error');
    }
  }); // istanbul ignore next

  pool.on('connect', client => {
    client.connection.slonik = {
      connectionId: (0, _utilities.createUlid)(),
      transactionDepth: null,
      typeParserSetupPromise: null
    };
    client.on('notice', notice => {
      poolLog.info({
        notice: {
          level: notice.name,
          message: notice.message
        }
      }, 'notice message');
    });
    poolLog.info({
      processId: client.processID,
      stats: {
        idleConnectionCount: pool.idleCount,
        totalConnectionCount: pool.totalCount,
        waitingRequestCount: pool.waitingCount
      }
    }, 'created a new client connection');
  }); // istanbul ignore next

  pool.on('acquire', client => {
    poolLog.info({
      processId: client.processID,
      stats: {
        idleConnectionCount: pool.idleCount,
        totalConnectionCount: pool.totalCount,
        waitingRequestCount: pool.waitingCount
      }
    }, 'client is checked out from the pool');
  }); // istanbul ignore next

  pool.on('remove', client => {
    poolLog.info({
      processId: client.processID,
      stats: {
        idleConnectionCount: pool.idleCount,
        totalConnectionCount: pool.totalCount,
        waitingRequestCount: pool.waitingCount
      }
    }, 'client connection is closed and removed from the client pool');
  });
  return (0, _bindPool.default)(poolLog, pool, clientConfiguration);
};

var _default = createPool;
exports.default = _default;
//# sourceMappingURL=createPool.js.map