{"version":3,"sources":["../../src/factories/createPool.js"],"names":["connectionUri","clientUserConfiguration","clientConfiguration","poolId","poolLog","Logger","child","poolConfiguration","connectionTimeout","connectionTimeoutMillis","idleTimeout","idleTimeoutMillis","maximumPoolSize","max","minimumPoolSize","min","pool","pg","Pool","slonik","on","error","client","connection","terminated","connectionId","transactionDepth","typeParserSetupPromise","notice","info","level","name","message","processId","processID","stats","idleConnectionCount","idleCount","totalConnectionCount","totalCount","waitingRequestCount","waitingCount"],"mappings":"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","sourcesContent":["// @flow\n\nimport pg from 'pg';\nimport serializeError from 'serialize-error';\nimport {\n  parse as parseConnectionString\n} from 'pg-connection-string';\nimport {\n  createUlid\n} from '../utilities';\nimport type {\n  ClientUserConfigurationType,\n  DatabasePoolType\n} from '../types';\nimport Logger from '../Logger';\nimport bindPool from '../binders/bindPool';\nimport createClientConfiguration from './createClientConfiguration';\n\n/**\n * @param connectionUri PostgreSQL [Connection URI](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING).\n */\nexport default (\n  connectionUri: string,\n  clientUserConfiguration?: ClientUserConfigurationType\n): DatabasePoolType => {\n  const clientConfiguration = createClientConfiguration(clientUserConfiguration);\n\n  const poolId = createUlid();\n\n  const poolLog = Logger.child({\n    poolId\n  });\n\n  const poolConfiguration = parseConnectionString(connectionUri);\n\n  if (clientConfiguration.connectionTimeout) {\n    poolConfiguration.connectionTimeoutMillis = clientConfiguration.connectionTimeout;\n  }\n\n  if (clientConfiguration.idleTimeout) {\n    poolConfiguration.idleTimeoutMillis = clientConfiguration.idleTimeout;\n  }\n\n  if (clientConfiguration.maximumPoolSize) {\n    poolConfiguration.max = clientConfiguration.maximumPoolSize;\n  }\n\n  if (clientConfiguration.minimumPoolSize) {\n    poolConfiguration.min = clientConfiguration.minimumPoolSize;\n  }\n\n  const pool = new pg.Pool(poolConfiguration);\n\n  pool.slonik = {\n    poolId\n  };\n\n  // istanbul ignore next\n  pool.on('error', (error) => {\n    if (error.client.connection.slonik.terminated !== true) {\n      poolLog.error({\n        error: serializeError(error)\n      }, 'client connection error');\n    }\n  });\n\n  // istanbul ignore next\n  pool.on('connect', (client) => {\n    client.connection.slonik = {\n      connectionId: createUlid(),\n      transactionDepth: null,\n      typeParserSetupPromise: null\n    };\n\n    client.on('notice', (notice) => {\n      poolLog.info({\n        notice: {\n          level: notice.name,\n          message: notice.message\n        }\n      }, 'notice message');\n    });\n\n    poolLog.info({\n      processId: client.processID,\n      stats: {\n        idleConnectionCount: pool.idleCount,\n        totalConnectionCount: pool.totalCount,\n        waitingRequestCount: pool.waitingCount\n      }\n    }, 'created a new client connection');\n  });\n\n  // istanbul ignore next\n  pool.on('acquire', (client) => {\n    poolLog.info({\n      processId: client.processID,\n      stats: {\n        idleConnectionCount: pool.idleCount,\n        totalConnectionCount: pool.totalCount,\n        waitingRequestCount: pool.waitingCount\n      }\n    }, 'client is checked out from the pool');\n  });\n\n  // istanbul ignore next\n  pool.on('remove', (client) => {\n    poolLog.info({\n      processId: client.processID,\n      stats: {\n        idleConnectionCount: pool.idleCount,\n        totalConnectionCount: pool.totalCount,\n        waitingRequestCount: pool.waitingCount\n      }\n    }, 'client connection is closed and removed from the client pool');\n  });\n\n  return bindPool(poolLog, pool, clientConfiguration);\n};\n"],"file":"createPool.js"}