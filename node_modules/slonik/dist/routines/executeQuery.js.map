{"version":3,"sources":["../../src/routines/executeQuery.js"],"names":["connectionLogger","connection","clientConfiguration","rawSql","values","inheritedQueryId","executionRoutine","slonik","terminated","UnexpectedStateError","queryInputTime","process","hrtime","bigint","stackTrace","captureStackTrace","callSites","map","callSite","columnNumber","fileName","lineNumber","queryId","log","child","originalQuery","sql","actualQuery","executionContext","connectionId","poolId","transactionId","interceptor","interceptors","transformQuery","result","beforeQueryExecution","notices","noticeListener","notice","push","on","error","code","message","BackendTerminatedError","QueryCancelledError","NotNullIntegrityConstraintViolationError","constraint","ForeignKeyIntegrityConstraintViolationError","UniqueIntegrityConstraintViolationError","CheckIntegrityConstraintViolationError","off","afterQueryExecution","rows","transformRow","fields","row"],"mappings":"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","sourcesContent":["// @flow\n\nimport serializeError from 'serialize-error';\nimport {\n  getStackTrace\n} from 'get-stack-trace';\nimport {\n  createQueryId\n} from '../utilities';\nimport {\n  BackendTerminatedError,\n  CheckIntegrityConstraintViolationError,\n  ForeignKeyIntegrityConstraintViolationError,\n  NotNullIntegrityConstraintViolationError,\n  QueryCancelledError,\n  UnexpectedStateError,\n  UniqueIntegrityConstraintViolationError\n} from '../errors';\nimport type {\n  ClientConfigurationType,\n  InternalDatabaseConnectionType,\n  LoggerType,\n  PrimitiveValueExpressionType,\n  QueryContextType,\n  QueryIdType,\n  QueryResultRowType,\n  QueryType\n} from '../types';\n\ntype ExecutionRoutineType = (\n  connection: InternalDatabaseConnectionType,\n  sql: string,\n  values: $ReadOnlyArray<PrimitiveValueExpressionType>,\n  queryContext: QueryContextType,\n  query: QueryType\n) => Promise<*>;\n\n// eslint-disable-next-line complexity\nexport default async (\n  connectionLogger: LoggerType,\n  connection: InternalDatabaseConnectionType,\n  clientConfiguration: ClientConfigurationType,\n  rawSql: string,\n  values: $ReadOnlyArray<PrimitiveValueExpressionType>,\n  inheritedQueryId?: QueryIdType,\n  executionRoutine: ExecutionRoutineType\n) => {\n  if (connection.connection.slonik.terminated) {\n    throw new UnexpectedStateError('Cannot use terminated connection.');\n  }\n\n  const queryInputTime = process.hrtime.bigint();\n\n  let stackTrace = null;\n\n  if (clientConfiguration.captureStackTrace) {\n    const callSites = await getStackTrace();\n\n    stackTrace = callSites\n      .map((callSite) => {\n        return {\n          columnNumber: callSite.columnNumber,\n          fileName: callSite.fileName,\n          lineNumber: callSite.lineNumber\n        };\n      });\n  }\n\n  const queryId = inheritedQueryId || createQueryId();\n\n  const log = connectionLogger.child({\n    queryId\n  });\n\n  const originalQuery = {\n    sql: rawSql,\n    values\n  };\n\n  let actualQuery = {\n    ...originalQuery\n  };\n\n  const executionContext: QueryContextType = {\n    connectionId: connection.connection.slonik.connectionId,\n    log,\n    originalQuery,\n    poolId: connection.connection.slonik.poolId,\n    queryId,\n    queryInputTime,\n    stackTrace,\n    transactionId: connection.connection.slonik.transactionId\n  };\n\n  for (const interceptor of clientConfiguration.interceptors) {\n    if (interceptor.transformQuery) {\n      actualQuery = interceptor.transformQuery(executionContext, actualQuery);\n    }\n  }\n\n  let result;\n\n  for (const interceptor of clientConfiguration.interceptors) {\n    if (interceptor.beforeQueryExecution) {\n      result = await interceptor.beforeQueryExecution(executionContext, actualQuery);\n\n      if (result) {\n        return result;\n      }\n    }\n  }\n\n  const notices = [];\n\n  const noticeListener = (notice) => {\n    notices.push(notice);\n  };\n\n  connection.on('notice', noticeListener);\n\n  try {\n    result = await executionRoutine(connection, actualQuery.sql, actualQuery.values, executionContext, actualQuery);\n  } catch (error) {\n    // 'Connection terminated' refers to node-postgres error.\n    // @see https://github.com/brianc/node-postgres/blob/eb076db5d47a29c19d3212feac26cd7b6d257a95/lib/client.js#L199\n    if (error.code === '57P01' || error.message === 'Connection terminated') {\n      connection.connection.slonik.terminated = true;\n\n      throw new BackendTerminatedError();\n    }\n\n    if (error.code === '57014') {\n      throw new QueryCancelledError();\n    }\n\n    log.error({\n      error: serializeError(error),\n      queryId\n    }, 'query produced an error');\n\n    if (error.code === '23502') {\n      throw new NotNullIntegrityConstraintViolationError(error.constraint);\n    }\n\n    if (error.code === '23503') {\n      throw new ForeignKeyIntegrityConstraintViolationError(error.constraint);\n    }\n\n    if (error.code === '23505') {\n      throw new UniqueIntegrityConstraintViolationError(error.constraint);\n    }\n\n    if (error.code === '23514') {\n      throw new CheckIntegrityConstraintViolationError(error.constraint);\n    }\n\n    throw error;\n  } finally {\n    connection.off('notice', noticeListener);\n  }\n\n  result.notices = notices;\n\n  for (const interceptor of clientConfiguration.interceptors) {\n    if (interceptor.afterQueryExecution) {\n      result = await interceptor.afterQueryExecution(executionContext, actualQuery, result);\n    }\n  }\n\n  // Stream does not have `rows` in the result object and all rows are already transformed.\n  if (result.rows) {\n    for (const interceptor of clientConfiguration.interceptors) {\n      if (interceptor.transformRow) {\n        const transformRow = interceptor.transformRow;\n        const fields = result.fields;\n\n        // eslint-disable-next-line no-loop-func\n        const rows: $ReadOnlyArray<QueryResultRowType> = result.rows.map((row) => {\n          return transformRow(executionContext, actualQuery, row, fields);\n        });\n\n        result = {\n          ...result,\n          rows\n        };\n      }\n    }\n  }\n\n  return result;\n};\n"],"file":"executeQuery.js"}