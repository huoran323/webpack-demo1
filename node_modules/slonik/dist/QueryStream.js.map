{"version":3,"sources":["../src/QueryStream.js"],"names":["QueryStream","Readable","constructor","text","values","options","objectMode","cursor","Cursor","_reading","_closed","batchSize","handleRowDescription","bind","handleDataRow","handlePortalSuspended","handleCommandComplete","handleReadyForQuery","handleError","submit","connection","close","callback","emit","_read","size","readAmount","Math","max","read","error","rows","result","length","setImmediate","push","row","fields"],"mappings":";;;;;;;AAIA;;AAGA;;;;AALA;;AAOA;;;;AAIe,MAAMA,WAAN,SAA0BC,gBAA1B,CAAmC;AAuBhD;AACAC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,MAAR,EAAgBC,OAAhB,EAAyB;AAClC,UAAM;AACJC,MAAAA,UAAU,EAAE,IADR;AAEJ,SAAGD;AAFC,KAAN;AAIA,SAAKE,MAAL,GAAc,IAAIC,iBAAJ,CAAWL,IAAX,EAAiBC,MAAjB,CAAd;AACA,SAAKK,QAAL,GAAgB,KAAhB;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,SAAL,GAAiB,CAACN,OAAO,IAAI,EAAZ,EAAgBM,SAAhB,IAA6B,GAA9C,CARkC,CAUlC;;AACA,SAAKC,oBAAL,GAA4B,KAAKL,MAAL,CAAYK,oBAAZ,CAAiCC,IAAjC,CAAsC,KAAKN,MAA3C,CAA5B;AACA,SAAKO,aAAL,GAAqB,KAAKP,MAAL,CAAYO,aAAZ,CAA0BD,IAA1B,CAA+B,KAAKN,MAApC,CAArB;AACA,SAAKQ,qBAAL,GAA6B,KAAKR,MAAL,CAAYQ,qBAAZ,CAAkCF,IAAlC,CAAuC,KAAKN,MAA5C,CAA7B;AACA,SAAKS,qBAAL,GAA6B,KAAKT,MAAL,CAAYS,qBAAZ,CAAkCH,IAAlC,CAAuC,KAAKN,MAA5C,CAA7B;AACA,SAAKU,mBAAL,GAA2B,KAAKV,MAAL,CAAYU,mBAAZ,CAAgCJ,IAAhC,CAAqC,KAAKN,MAA1C,CAA3B;AACA,SAAKW,WAAL,GAAmB,KAAKX,MAAL,CAAYW,WAAZ,CAAwBL,IAAxB,CAA6B,KAAKN,MAAlC,CAAnB;AACD;;AAEDY,EAAAA,MAAM,CAAEC,UAAF,EAAsB;AAC1B,SAAKb,MAAL,CAAYY,MAAZ,CAAmBC,UAAnB;AACD;;AAEDC,EAAAA,KAAK,CAAEC,QAAF,EAAsB;AACzB,SAAKZ,OAAL,GAAe,IAAf;;AAEA,UAAMW,KAAK,GAAG,MAAM;AAClB,WAAKE,IAAL,CAAU,OAAV;AACD,KAFD;;AAIA,SAAKhB,MAAL,CAAYc,KAAZ,CAAkBC,QAAQ,IAAID,KAA9B;AACD;;AAEDG,EAAAA,KAAK,CAAEC,IAAF,EAAgB;AACnB,QAAI,KAAKhB,QAAL,IAAiB,KAAKC,OAA1B,EAAmC;AACjC;AACD;;AACD,SAAKD,QAAL,GAAgB,IAAhB;AACA,UAAMiB,UAAU,GAAGC,IAAI,CAACC,GAAL,CAASH,IAAT,EAAe,KAAKd,SAApB,CAAnB;AACA,SAAKJ,MAAL,CAAYsB,IAAZ,CAAiBH,UAAjB,EAA6B,CAACI,KAAD,EAAQC,IAAR,EAAcC,MAAd,KAAyB;AACpD,UAAI,KAAKtB,OAAT,EAAkB;AAChB;AACD;;AAED,UAAIoB,KAAJ,EAAW;AACT,aAAKP,IAAL,CAAU,OAAV,EAAmBO,KAAnB;AAEA;AACD;;AAED,UAAI,CAACC,IAAI,CAACE,MAAV,EAAkB;AAChB,aAAKvB,OAAL,GAAe,IAAf;AAEAwB,QAAAA,YAAY,CAAC,MAAM;AACjB,eAAKX,IAAL,CAAU,OAAV;AACD,SAFW,CAAZ;AAIA,aAAKY,IAAL,CAAU,IAAV;AAEA;AACD,OArBmD,CAuBpD;;;AACA,WAAK1B,QAAL,GAAgB,KAAhB;;AAEA,WAAK,MAAM2B,GAAX,IAAkBL,IAAlB,EAAwB;AACtB;AACA,aAAKI,IAAL,CAAU;AACRE,UAAAA,MAAM,EAAEL,MAAM,CAACK,MADP;AAERD,UAAAA;AAFQ,SAAV;AAID;AACF,KAjCD;AAkCD;;AAjG+C","sourcesContent":["// @flow\n\n/* eslint-disable fp/no-class, fp/no-this, id-match, flowtype/no-weak-types */\n\nimport {\n  Readable\n} from 'stream';\nimport Cursor from 'pg-cursor';\n\n/**\n * @see https://github.com/brianc/node-pg-query-stream\n * @see https://github.com/brianc/node-pg-query-stream/issues/51\n */\nexport default class QueryStream extends Readable {\n  _reading: boolean;\n\n  _closed: boolean;\n\n  cursor: Cursor;\n\n  batchSize: number;\n\n  handleRowDescription: Function;\n\n  handlePortalSuspended: Function;\n\n  handleDataRow: Function;\n\n  handlePortalSuspended: Function;\n\n  handleCommandComplete: Function;\n\n  handleReadyForQuery: Function;\n\n  handleError: Function;\n\n  // $FlowFixMe\n  constructor (text, values, options) {\n    super({\n      objectMode: true,\n      ...options\n    });\n    this.cursor = new Cursor(text, values);\n    this._reading = false;\n    this._closed = false;\n    this.batchSize = (options || {}).batchSize || 100;\n\n    // delegate Submittable callbacks to cursor\n    this.handleRowDescription = this.cursor.handleRowDescription.bind(this.cursor);\n    this.handleDataRow = this.cursor.handleDataRow.bind(this.cursor);\n    this.handlePortalSuspended = this.cursor.handlePortalSuspended.bind(this.cursor);\n    this.handleCommandComplete = this.cursor.handleCommandComplete.bind(this.cursor);\n    this.handleReadyForQuery = this.cursor.handleReadyForQuery.bind(this.cursor);\n    this.handleError = this.cursor.handleError.bind(this.cursor);\n  }\n\n  submit (connection: Object) {\n    this.cursor.submit(connection);\n  }\n\n  close (callback: Function) {\n    this._closed = true;\n\n    const close = () => {\n      this.emit('close');\n    };\n\n    this.cursor.close(callback || close);\n  }\n\n  _read (size: number) {\n    if (this._reading || this._closed) {\n      return;\n    }\n    this._reading = true;\n    const readAmount = Math.max(size, this.batchSize);\n    this.cursor.read(readAmount, (error, rows, result) => {\n      if (this._closed) {\n        return;\n      }\n\n      if (error) {\n        this.emit('error', error);\n\n        return;\n      }\n\n      if (!rows.length) {\n        this._closed = true;\n\n        setImmediate(() => {\n          this.emit('close');\n        });\n\n        this.push(null);\n\n        return;\n      }\n\n      // push each row into the stream\n      this._reading = false;\n\n      for (const row of rows) {\n        // $FlowFixMe\n        this.push({\n          fields: result.fields,\n          row\n        });\n      }\n    });\n  }\n}\n"],"file":"QueryStream.js"}