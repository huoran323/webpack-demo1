{"version":3,"sources":["../../src/connectionMethods/maybeOne.js"],"names":["maybeOne","log","connection","clientConfiguration","rawSql","values","inheritedQueryId","queryId","rows","length","error","DataIntegrityError"],"mappings":";;;;;;;AAEA;;AAGA;;AAMA;;;;AAEA;;;;;AAKA,MAAMA,QAA2C,GAAG,OAAOC,GAAP,EAAYC,UAAZ,EAAwBC,mBAAxB,EAA6CC,MAA7C,EAAqDC,MAArD,EAA6DC,gBAA7D,KAAkF;AACpI,QAAMC,OAAO,GAAGD,gBAAgB,IAAI,+BAApC;AAEA,QAAM;AACJE,IAAAA;AADI,MAEF,MAAM,oBAAMP,GAAN,EAAWC,UAAX,EAAuBC,mBAAvB,EAA4CC,MAA5C,EAAoDC,MAApD,EAA4DE,OAA5D,CAFV;;AAIA,MAAIC,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAO,IAAP;AACD;;AAED,MAAID,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;AACnBR,IAAAA,GAAG,CAACS,KAAJ,CAAU;AACRH,MAAAA;AADQ,KAAV,EAEG,oBAFH;AAIA,UAAM,IAAII,0BAAJ,EAAN;AACD;;AAED,SAAOH,IAAI,CAAC,CAAD,CAAX;AACD,CApBD;;eAsBeR,Q","sourcesContent":["// @flow\n\nimport {\n  createQueryId\n} from '../utilities';\nimport {\n  DataIntegrityError\n} from '../errors';\nimport type {\n  InternalQueryMaybeOneFunctionType\n} from '../types';\nimport query from './query';\n\n/**\n * Makes a query and expects exactly one result.\n *\n * @throws DataIntegrityError If query returns multiple rows.\n */\nconst maybeOne: InternalQueryMaybeOneFunctionType = async (log, connection, clientConfiguration, rawSql, values, inheritedQueryId) => {\n  const queryId = inheritedQueryId || createQueryId();\n\n  const {\n    rows\n  } = await query(log, connection, clientConfiguration, rawSql, values, queryId);\n\n  if (rows.length === 0) {\n    return null;\n  }\n\n  if (rows.length > 1) {\n    log.error({\n      queryId\n    }, 'DataIntegrityError');\n\n    throw new DataIntegrityError();\n  }\n\n  return rows[0];\n};\n\nexport default maybeOne;\n"],"file":"maybeOne.js"}