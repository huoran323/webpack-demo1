{"version":3,"sources":["../../src/connectionMethods/maybeOneFirst.js"],"names":["maybeOneFirst","log","connection","clientConfiguration","rawSql","values","inheritedQueryId","queryId","row","keys","Object","length","error","DataIntegrityError"],"mappings":";;;;;;;AAEA;;AAGA;;AAMA;;;;AAEA;;;;;;AAMA,MAAMA,aAAqD,GAAG,OAAOC,GAAP,EAAYC,UAAZ,EAAwBC,mBAAxB,EAA6CC,MAA7C,EAAqDC,MAArD,EAA6DC,gBAA7D,KAAkF;AAC9I,QAAMC,OAAO,GAAGD,gBAAgB,IAAI,+BAApC;AAEA,QAAME,GAAG,GAAG,MAAM,uBAASP,GAAT,EAAcC,UAAd,EAA0BC,mBAA1B,EAA+CC,MAA/C,EAAuDC,MAAvD,EAA+DE,OAA/D,CAAlB;;AAEA,MAAI,CAACC,GAAL,EAAU;AACR,WAAO,IAAP;AACD;;AAED,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,GAAZ,CAAb;;AAEA,MAAIC,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACrBV,IAAAA,GAAG,CAACW,KAAJ,CAAU;AACRL,MAAAA;AADQ,KAAV,EAEG,oBAFH;AAIA,UAAM,IAAIM,0BAAJ,EAAN;AACD;;AAED,SAAOL,GAAG,CAACC,IAAI,CAAC,CAAD,CAAL,CAAV;AACD,CApBD;;eAsBeT,a","sourcesContent":["// @flow\n\nimport {\n  createQueryId\n} from '../utilities';\nimport {\n  DataIntegrityError\n} from '../errors';\nimport type {\n  InternalQueryMaybeOneFirstFunctionType\n} from '../types';\nimport maybeOne from './maybeOne';\n\n/**\n * Makes a query and expects exactly one result.\n * Returns value of the first column.\n *\n * @throws DataIntegrityError If query returns multiple rows.\n */\nconst maybeOneFirst: InternalQueryMaybeOneFirstFunctionType = async (log, connection, clientConfiguration, rawSql, values, inheritedQueryId) => {\n  const queryId = inheritedQueryId || createQueryId();\n\n  const row = await maybeOne(log, connection, clientConfiguration, rawSql, values, queryId);\n\n  if (!row) {\n    return null;\n  }\n\n  const keys = Object.keys(row);\n\n  if (keys.length !== 1) {\n    log.error({\n      queryId\n    }, 'DataIntegrityError');\n\n    throw new DataIntegrityError();\n  }\n\n  return row[keys[0]];\n};\n\nexport default maybeOneFirst;\n"],"file":"maybeOneFirst.js"}