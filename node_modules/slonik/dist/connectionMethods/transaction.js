"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _serializeError = _interopRequireDefault(require("serialize-error"));

var _binders = require("../binders");

var _utilities = require("../utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const transaction = async (parentLog, connection, clientConfiguration, handler) => {
  if (connection.connection.slonik.transactionDepth !== null) {
    throw new Error('Cannot use the same connection to start a new transaction before completing the last transaction.');
  }

  connection.connection.slonik.transactionDepth = 0;
  connection.connection.slonik.transactionId = (0, _utilities.createUlid)();
  await connection.query('START TRANSACTION');
  const log = parentLog.child({
    transactionId: connection.connection.slonik.transactionId
  });

  try {
    const result = await handler((0, _binders.bindTransactionConnection)(log, connection, clientConfiguration, connection.connection.slonik.transactionDepth));
    await connection.query('COMMIT');
    return result;
  } catch (error) {
    await connection.query('ROLLBACK');
    log.error({
      error: (0, _serializeError.default)(error)
    }, 'rolling back transaction due to an error');
    throw error;
  } finally {
    connection.connection.slonik.transactionDepth = null;
    connection.connection.slonik.transactionId = null;
  }
};

var _default = transaction;
exports.default = _default;
//# sourceMappingURL=transaction.js.map