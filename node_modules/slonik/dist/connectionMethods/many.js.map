{"version":3,"sources":["../../src/connectionMethods/many.js"],"names":["many","log","connection","clientConfiguration","rawSql","values","inheritedQueryId","queryId","rows","length","error","NotFoundError"],"mappings":";;;;;;;AAEA;;AAGA;;AAMA;;;;AAEA;;;;;AAKA,MAAMA,IAAmC,GAAG,OAAOC,GAAP,EAAYC,UAAZ,EAAwBC,mBAAxB,EAA6CC,MAA7C,EAAqDC,MAArD,EAA6DC,gBAA7D,KAAkF;AAC5H,QAAMC,OAAO,GAAGD,gBAAgB,IAAI,+BAApC;AAEA,QAAM;AACJE,IAAAA;AADI,MAEF,MAAM,oBAAMP,GAAN,EAAWC,UAAX,EAAuBC,mBAAvB,EAA4CC,MAA5C,EAAoDC,MAApD,EAA4DE,OAA5D,CAFV;;AAIA,MAAIC,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrBR,IAAAA,GAAG,CAACS,KAAJ,CAAU;AACRH,MAAAA;AADQ,KAAV,EAEG,eAFH;AAIA,UAAM,IAAII,qBAAJ,EAAN;AACD;;AAED,SAAOH,IAAP;AACD,CAhBD;;eAkBeR,I","sourcesContent":["// @flow\n\nimport {\n  createQueryId\n} from '../utilities';\nimport {\n  NotFoundError\n} from '../errors';\nimport type {\n  InternalQueryManyFunctionType\n} from '../types';\nimport query from './query';\n\n/**\n * Makes a query and expects at least 1 result.\n *\n * @throws NotFoundError If query returns no rows.\n */\nconst many: InternalQueryManyFunctionType = async (log, connection, clientConfiguration, rawSql, values, inheritedQueryId) => {\n  const queryId = inheritedQueryId || createQueryId();\n\n  const {\n    rows\n  } = await query(log, connection, clientConfiguration, rawSql, values, queryId);\n\n  if (rows.length === 0) {\n    log.error({\n      queryId\n    }, 'NotFoundError');\n\n    throw new NotFoundError();\n  }\n\n  return rows;\n};\n\nexport default many;\n"],"file":"many.js"}