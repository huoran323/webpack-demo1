{"version":3,"sources":["../../src/connectionMethods/transaction.js"],"names":["transaction","parentLog","connection","clientConfiguration","handler","slonik","transactionDepth","Error","transactionId","query","log","child","result","error"],"mappings":";;;;;;;AAEA;;AACA;;AAGA;;;;AAOA,MAAMA,WAA4C,GAAG,OAAOC,SAAP,EAAkBC,UAAlB,EAA8BC,mBAA9B,EAAmDC,OAAnD,KAA+D;AAClH,MAAIF,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BC,gBAA7B,KAAkD,IAAtD,EAA4D;AAC1D,UAAM,IAAIC,KAAJ,CAAU,mGAAV,CAAN;AACD;;AAEDL,EAAAA,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BC,gBAA7B,GAAgD,CAAhD;AACAJ,EAAAA,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BG,aAA7B,GAA6C,4BAA7C;AAEA,QAAMN,UAAU,CAACO,KAAX,CAAiB,mBAAjB,CAAN;AAEA,QAAMC,GAAG,GAAGT,SAAS,CAACU,KAAV,CAAgB;AAC1BH,IAAAA,aAAa,EAAEN,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BG;AADlB,GAAhB,CAAZ;;AAIA,MAAI;AACF,UAAMI,MAAM,GAAG,MAAMR,OAAO,CAAC,wCAA0BM,GAA1B,EAA+BR,UAA/B,EAA2CC,mBAA3C,EAAgED,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BC,gBAA7F,CAAD,CAA5B;AAEA,UAAMJ,UAAU,CAACO,KAAX,CAAiB,QAAjB,CAAN;AAEA,WAAOG,MAAP;AACD,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAMX,UAAU,CAACO,KAAX,CAAiB,UAAjB,CAAN;AAEAC,IAAAA,GAAG,CAACG,KAAJ,CAAU;AACRA,MAAAA,KAAK,EAAE,6BAAeA,KAAf;AADC,KAAV,EAEG,0CAFH;AAIA,UAAMA,KAAN;AACD,GAdD,SAcU;AACRX,IAAAA,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BC,gBAA7B,GAAgD,IAAhD;AACAJ,IAAAA,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BG,aAA7B,GAA6C,IAA7C;AACD;AACF,CAhCD;;eAkCeR,W","sourcesContent":["// @flow\n\nimport serializeError from 'serialize-error';\nimport {\n  bindTransactionConnection\n} from '../binders';\nimport {\n  createUlid\n} from '../utilities';\nimport type {\n  InternalTransactionFunctionType\n} from '../types';\n\nconst transaction: InternalTransactionFunctionType = async (parentLog, connection, clientConfiguration, handler) => {\n  if (connection.connection.slonik.transactionDepth !== null) {\n    throw new Error('Cannot use the same connection to start a new transaction before completing the last transaction.');\n  }\n\n  connection.connection.slonik.transactionDepth = 0;\n  connection.connection.slonik.transactionId = createUlid();\n\n  await connection.query('START TRANSACTION');\n\n  const log = parentLog.child({\n    transactionId: connection.connection.slonik.transactionId\n  });\n\n  try {\n    const result = await handler(bindTransactionConnection(log, connection, clientConfiguration, connection.connection.slonik.transactionDepth));\n\n    await connection.query('COMMIT');\n\n    return result;\n  } catch (error) {\n    await connection.query('ROLLBACK');\n\n    log.error({\n      error: serializeError(error)\n    }, 'rolling back transaction due to an error');\n\n    throw error;\n  } finally {\n    connection.connection.slonik.transactionDepth = null;\n    connection.connection.slonik.transactionId = null;\n  }\n};\n\nexport default transaction;\n"],"file":"transaction.js"}