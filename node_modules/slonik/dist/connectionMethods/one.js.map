{"version":3,"sources":["../../src/connectionMethods/one.js"],"names":["one","log","connection","clientConfiguration","rawSql","values","inheritedQueryId","queryId","rows","length","error","NotFoundError","DataIntegrityError"],"mappings":";;;;;;;AAKA;;AAIA;;AAGA;;;;AAEA;;;;;;AAMA,MAAMA,GAAiC,GAAG,OAAOC,GAAP,EAAYC,UAAZ,EAAwBC,mBAAxB,EAA6CC,MAA7C,EAAqDC,MAArD,EAA6DC,gBAA7D,KAAkF;AAC1H,QAAMC,OAAO,GAAGD,gBAAgB,IAAI,+BAApC;AAEA,QAAM;AACJE,IAAAA;AADI,MAEF,MAAM,oBAAMP,GAAN,EAAWC,UAAX,EAAuBC,mBAAvB,EAA4CC,MAA5C,EAAoDC,MAApD,EAA4DE,OAA5D,CAFV;;AAIA,MAAIC,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrBR,IAAAA,GAAG,CAACS,KAAJ,CAAU;AACRH,MAAAA;AADQ,KAAV,EAEG,eAFH;AAIA,UAAM,IAAII,qBAAJ,EAAN;AACD;;AAED,MAAIH,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;AACnBR,IAAAA,GAAG,CAACS,KAAJ,CAAU;AACRH,MAAAA;AADQ,KAAV,EAEG,oBAFH;AAIA,UAAM,IAAIK,0BAAJ,EAAN;AACD;;AAED,SAAOJ,IAAI,CAAC,CAAD,CAAX;AACD,CAxBD;;eA0BeR,G","sourcesContent":["// @flow\n\nimport type {\n  InternalQueryOneFunctionType\n} from '../types';\nimport {\n  DataIntegrityError,\n  NotFoundError\n} from '../errors';\nimport {\n  createQueryId\n} from '../utilities';\nimport query from './query';\n\n/**\n * Makes a query and expects exactly one result.\n *\n * @throws NotFoundError If query returns no rows.\n * @throws DataIntegrityError If query returns multiple rows.\n */\nconst one: InternalQueryOneFunctionType = async (log, connection, clientConfiguration, rawSql, values, inheritedQueryId) => {\n  const queryId = inheritedQueryId || createQueryId();\n\n  const {\n    rows\n  } = await query(log, connection, clientConfiguration, rawSql, values, queryId);\n\n  if (rows.length === 0) {\n    log.error({\n      queryId\n    }, 'NotFoundError');\n\n    throw new NotFoundError();\n  }\n\n  if (rows.length > 1) {\n    log.error({\n      queryId\n    }, 'DataIntegrityError');\n\n    throw new DataIntegrityError();\n  }\n\n  return rows[0];\n};\n\nexport default one;\n"],"file":"one.js"}