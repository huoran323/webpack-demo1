{"version":3,"sources":["../../src/connectionMethods/stream.js"],"names":["stream","connectionLogger","connection","clientConfiguration","rawSql","values","streamHandler","undefined","finalConnection","finsalSql","finalValues","executionContext","actualQuery","query","QueryStream","queryStream","rowTransformers","interceptor","interceptors","transformRow","push","Promise","resolve","reject","on","error","transformedStream","pipe","through","obj","datum","enc","callback","finalRow","row","length","rowTransformer","fields"],"mappings":";;;;;;;AAEA;;AACA;;AAMA;;;;AAEA,MAAMA,MAAkC,GAAG,OAAOC,gBAAP,EAAyBC,UAAzB,EAAqCC,mBAArC,EAA0DC,MAA1D,EAAkEC,MAAlE,EAA0EC,aAA1E,KAA4F;AACrI,SAAO,4BACLL,gBADK,EAELC,UAFK,EAGLC,mBAHK,EAILC,MAJK,EAKLC,MALK,EAMLE,SANK,EAOL,CAACC,eAAD,EAAkBC,SAAlB,EAA6BC,WAA7B,EAA0CC,gBAA1C,EAA4DC,WAA5D,KAA4E;AAC1E,UAAMC,KAAK,GAAG,IAAIC,oBAAJ,CAAgBL,SAAhB,EAA2BC,WAA3B,CAAd;AAEA,UAAMK,WAAW,GAAGP,eAAe,CAACK,KAAhB,CAAsBA,KAAtB,CAApB;AAEA,UAAMG,eAAe,GAAG,EAAxB;;AAEA,SAAK,MAAMC,WAAX,IAA0Bd,mBAAmB,CAACe,YAA9C,EAA4D;AAC1D,UAAID,WAAW,CAACE,YAAhB,EAA8B;AAC5BH,QAAAA,eAAe,CAACI,IAAhB,CAAqBH,WAAW,CAACE,YAAjC;AACD;AACF;;AAED,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,WAAW,CAACS,EAAZ,CAAe,OAAf,EAAyBC,KAAD,IAAW;AACjCF,QAAAA,MAAM,CAACE,KAAD,CAAN;AACD,OAFD;AAIA,YAAMC,iBAAiB,GAAGX,WAAW,CAACY,IAAZ,CAAiBC,iBAAQC,GAAR,CAAY,UAAUC,KAAV,EAAiBC,GAAjB,EAAsBC,QAAtB,EAAgC;AACrF,YAAIC,QAAQ,GAAGH,KAAK,CAACI,GAArB;;AAEA,YAAIlB,eAAe,CAACmB,MAApB,EAA4B;AAC1B,eAAK,MAAMC,cAAX,IAA6BpB,eAA7B,EAA8C;AAC5CiB,YAAAA,QAAQ,GAAGG,cAAc,CAACzB,gBAAD,EAAmBC,WAAnB,EAAgCqB,QAAhC,EAA0CH,KAAK,CAACO,MAAhD,CAAzB;AACD;AACF,SAPoF,CASrF;;;AACA,aAAKjB,IAAL,CAAU;AACRiB,UAAAA,MAAM,EAAEP,KAAK,CAACO,MADN;AAERH,UAAAA,GAAG,EAAED;AAFG,SAAV;AAKAD,QAAAA,QAAQ;AACT,OAhB0C,CAAjB,CAA1B;AAkBAN,MAAAA,iBAAiB,CAACF,EAAlB,CAAqB,KAArB,EAA4B,MAAM;AAChCF,QAAAA,OAAO,CAAC,EAAD,CAAP;AACD,OAFD,EAvBsC,CA2BtC;;AACAI,MAAAA,iBAAiB,CAACF,EAAlB,CAAqB,OAArB,EAA8B,MAAM;AAClCF,QAAAA,OAAO,CAAC,EAAD,CAAP;AACD,OAFD;AAIAhB,MAAAA,aAAa,CAACoB,iBAAD,CAAb;AACD,KAjCM,CAAP;AAkCD,GAtDI,CAAP;AAwDD,CAzDD;;eA2De1B,M","sourcesContent":["// @flow\n\nimport through from 'through2';\nimport {\n  executeQuery\n} from '../routines';\nimport type {\n  InternalStreamFunctionType\n} from '../types';\nimport QueryStream from '../QueryStream';\n\nconst stream: InternalStreamFunctionType = async (connectionLogger, connection, clientConfiguration, rawSql, values, streamHandler) => {\n  return executeQuery(\n    connectionLogger,\n    connection,\n    clientConfiguration,\n    rawSql,\n    values,\n    undefined,\n    (finalConnection, finsalSql, finalValues, executionContext, actualQuery) => {\n      const query = new QueryStream(finsalSql, finalValues);\n\n      const queryStream = finalConnection.query(query);\n\n      const rowTransformers = [];\n\n      for (const interceptor of clientConfiguration.interceptors) {\n        if (interceptor.transformRow) {\n          rowTransformers.push(interceptor.transformRow);\n        }\n      }\n\n      return new Promise((resolve, reject) => {\n        queryStream.on('error', (error) => {\n          reject(error);\n        });\n\n        const transformedStream = queryStream.pipe(through.obj(function (datum, enc, callback) {\n          let finalRow = datum.row;\n\n          if (rowTransformers.length) {\n            for (const rowTransformer of rowTransformers) {\n              finalRow = rowTransformer(executionContext, actualQuery, finalRow, datum.fields);\n            }\n          }\n\n          // eslint-disable-next-line fp/no-this, babel/no-invalid-this\n          this.push({\n            fields: datum.fields,\n            row: finalRow\n          });\n\n          callback();\n        }));\n\n        transformedStream.on('end', () => {\n          resolve({});\n        });\n\n        // Invoked if stream is destroyed using transformedStream.destroy().\n        transformedStream.on('close', () => {\n          resolve({});\n        });\n\n        streamHandler(transformedStream);\n      });\n    }\n  );\n};\n\nexport default stream;\n"],"file":"stream.js"}