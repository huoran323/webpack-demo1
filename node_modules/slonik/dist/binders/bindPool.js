"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _factories = require("../factories");

var _connectionMethods = require("../connectionMethods");

const bindPool = (parentLog, pool, clientConfiguration) => {
  const mapConnection = targetMethodName => {
    return query => {
      if (typeof query === 'string') {
        throw new TypeError('Query must be constructed using `sql` tagged template literal.');
      }

      return (0, _factories.createConnection)(parentLog, pool, clientConfiguration, 'IMPLICIT_QUERY', (connectionLog, connection, boundConnection) => {
        return boundConnection[targetMethodName](query);
      }, newPool => {
        return newPool[targetMethodName](query);
      }, query);
    };
  };

  return {
    any: mapConnection('any'),
    anyFirst: mapConnection('anyFirst'),
    connect: connectionHandler => {
      return (0, _factories.createConnection)(parentLog, pool, clientConfiguration, 'EXPLICIT', (connectionLog, connection, boundConnection) => {
        return connectionHandler(boundConnection);
      }, newPool => {
        return newPool.connect(connectionHandler);
      });
    },
    many: mapConnection('many'),
    manyFirst: mapConnection('manyFirst'),
    maybeOne: mapConnection('maybeOne'),
    maybeOneFirst: mapConnection('maybeOneFirst'),
    one: mapConnection('one'),
    oneFirst: mapConnection('oneFirst'),
    query: mapConnection('query'),
    stream: async (query, streamHandler) => {
      if (typeof query === 'string') {
        throw new TypeError('Query must be constructed using `sql` tagged template literal.');
      }

      await (0, _factories.createConnection)(parentLog, pool, clientConfiguration, 'IMPLICIT_QUERY', (connectionLog, connection, boundConnection) => {
        return boundConnection.stream(query, streamHandler);
      }, newPool => {
        return newPool.stream(query, streamHandler);
      }, query);
      return null;
    },
    transaction: async transactionHandler => {
      return (0, _factories.createConnection)(parentLog, pool, clientConfiguration, 'IMPLICIT_TRANSACTION', (connectionLog, connection) => {
        return (0, _connectionMethods.transaction)(connectionLog, connection, clientConfiguration, transactionHandler);
      }, newPool => {
        return newPool.transaction(transactionHandler);
      });
    }
  };
};

var _default = bindPool;
exports.default = _default;
//# sourceMappingURL=bindPool.js.map