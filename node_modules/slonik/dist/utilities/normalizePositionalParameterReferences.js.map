{"version":3,"sources":["../../src/utilities/normalizePositionalParameterReferences.js"],"names":["inputSql","values","greatestParameterPosition","sql","leastMatchedParameterPosition","Infinity","greatestMatchedParameterPosition","replace","match","g1","parameterPosition","parseInt","length","UnexpectedStateError"],"mappings":";;;;;;;AAEA;;AAOA;;;gDAIEA,Q,EACAC,MAAqC,GAAG,E,EACxCC,yB,KACG;AACH,MAAIC,GAAG,GAAG,EAAV;AAEA,MAAIC,6BAA6B,GAAGC,QAApC;AACA,MAAIC,gCAAgC,GAAG,CAAvC;AAEAH,EAAAA,GAAG,IAAIH,QAAQ,CAACO,OAAT,CAAiB,UAAjB,EAA6B,CAACC,KAAD,EAAQC,EAAR,KAAe;AACjD,UAAMC,iBAAiB,GAAGC,QAAQ,CAACF,EAAD,EAAK,EAAL,CAAlC;;AAEA,QAAIC,iBAAiB,GAAGJ,gCAAxB,EAA0D;AACxDA,MAAAA,gCAAgC,GAAGI,iBAAnC;AACD;;AAED,QAAIA,iBAAiB,GAAGN,6BAAxB,EAAuD;AACrDA,MAAAA,6BAA6B,GAAGM,iBAAhC;AACD;;AAED,WAAO,OAAOA,iBAAiB,GAAGR,yBAA3B,CAAP;AACD,GAZM,CAAP;;AAcA,MAAII,gCAAgC,GAAGL,MAAM,CAACW,MAA9C,EAAsD;AACpD,UAAM,IAAIC,4BAAJ,CAAyB,iFAAzB,CAAN;AACD;;AAED,MAAIT,6BAA6B,KAAKC,QAAlC,IAA8CD,6BAA6B,KAAK,CAApF,EAAuF;AACrF,UAAM,IAAIS,4BAAJ,CAAyB,qCAAzB,CAAN;AACD;;AAED,SAAO;AACLV,IAAAA,GADK;AAELF,IAAAA;AAFK,GAAP;AAID,C","sourcesContent":["// @flow\n\nimport {\n  UnexpectedStateError\n} from '../errors';\nimport type {\n  PositionalParameterValuesType\n} from '../types';\n\n/**\n * @see https://github.com/mysqljs/sqlstring/blob/f946198800a8d7f198fcf98d8bb80620595d01ec/lib/SqlString.js#L73\n */\nexport default (\n  inputSql: string,\n  values: PositionalParameterValuesType = [],\n  greatestParameterPosition: number\n) => {\n  let sql = '';\n\n  let leastMatchedParameterPosition = Infinity;\n  let greatestMatchedParameterPosition = 0;\n\n  sql += inputSql.replace(/\\$(\\d+)/g, (match, g1) => {\n    const parameterPosition = parseInt(g1, 10);\n\n    if (parameterPosition > greatestMatchedParameterPosition) {\n      greatestMatchedParameterPosition = parameterPosition;\n    }\n\n    if (parameterPosition < leastMatchedParameterPosition) {\n      leastMatchedParameterPosition = parameterPosition;\n    }\n\n    return '$' + (parameterPosition + greatestParameterPosition);\n  });\n\n  if (greatestMatchedParameterPosition > values.length) {\n    throw new UnexpectedStateError('The greatest parameter position is greater than the number of parameter values.');\n  }\n\n  if (leastMatchedParameterPosition !== Infinity && leastMatchedParameterPosition !== 1) {\n    throw new UnexpectedStateError('Parameter position must start at 1.');\n  }\n\n  return {\n    sql,\n    values\n  };\n};\n"],"file":"normalizePositionalParameterReferences.js"}