{"version":3,"sources":["../../src/utilities/normalizeNamedParameterReferences.js"],"names":["namedPlaceholderRegex","sql","values","greatestParameterPosition","chunkIndex","result","match","placeholderIndex","normalizedValues","valueNames","Object","keys","exec","matchIndex","index","matchName","hasOwnProperty","Error","value","includes","splice","indexOf","push","slice","lastIndex","length"],"mappings":";;;;;;;AAMA;;;AAGA,MAAMA,qBAAqB,GAAG,mBAA9B;AAEA;;;;2CAIEC,G,EACAC,MAAgC,GAAG,E,EACnCC,yB,KACG;AACH,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAJ;AACA,MAAIC,gBAAgB,GAAGJ,yBAAvB;AAEA,QAAMK,gBAAgB,GAAG,EAAzB;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYT,MAAZ,CAAnB,CAPG,CASH;;AACA,SAAOI,KAAK,GAAGN,qBAAqB,CAACY,IAAtB,CAA2BX,GAA3B,CAAf,EAAgD;AAC9C,UAAMY,UAAU,GAAGP,KAAK,CAACQ,KAAN,GAAc,CAAjC;AACA,UAAMC,SAAS,GAAGT,KAAK,CAAC,CAAD,CAAvB;;AAEA,QAAI,CAACJ,MAAM,CAACc,cAAP,CAAsBD,SAAtB,CAAL,EAAuC;AACrC,YAAM,IAAIE,KAAJ,CAAU,2DAAV,CAAN;AACD;;AAED,UAAMC,KAAK,GAAGhB,MAAM,CAACa,SAAD,CAApB;;AAEA,QAAIN,UAAU,CAACU,QAAX,CAAoBJ,SAApB,CAAJ,EAAoC;AAClCN,MAAAA,UAAU,CAACW,MAAX,CAAkBX,UAAU,CAACY,OAAX,CAAmBN,SAAnB,CAAlB;AACD;;AAEDP,IAAAA,gBAAgB,CAACc,IAAjB,CAAsBJ,KAAtB;AAEAb,IAAAA,MAAM,IAAIJ,GAAG,CAACsB,KAAJ,CAAUnB,UAAV,EAAsBS,UAAtB,CAAV;AAEAT,IAAAA,UAAU,GAAGJ,qBAAqB,CAACwB,SAAnC;AAEA,MAAEjB,gBAAF;AAEAF,IAAAA,MAAM,IAAI,MAAME,gBAAhB;AACD;;AAED,MAAIE,UAAU,CAACgB,MAAf,EAAuB;AACrB,UAAM,IAAIR,KAAJ,CAAU,wFAAV,CAAN;AACD;;AAED,MAAIb,UAAU,KAAK,CAAnB,EAAsB;AACpBC,IAAAA,MAAM,GAAGJ,GAAT;AACD,GAFD,MAEO,IAAIG,UAAU,GAAGH,GAAG,CAACwB,MAArB,EAA6B;AAClCpB,IAAAA,MAAM,IAAIJ,GAAG,CAACsB,KAAJ,CAAUnB,UAAV,CAAV;AACD;;AAED,SAAO;AACLH,IAAAA,GAAG,EAAEI,MADA;AAELH,IAAAA,MAAM,EAAEM;AAFH,GAAP;AAID,C","sourcesContent":["// @flow\n\nimport type {\n  NamedParameterValuesType\n} from '../types';\n\n/**\n * @see https://regex101.com/r/KrEe8i/2\n */\nconst namedPlaceholderRegex = /[\\s,(]:([a-z_]+)/g;\n\n/**\n * @see https://github.com/mysqljs/sqlstring/blob/f946198800a8d7f198fcf98d8bb80620595d01ec/lib/SqlString.js#L73\n */\nexport default (\n  sql: string,\n  values: NamedParameterValuesType = {},\n  greatestParameterPosition: number\n) => {\n  let chunkIndex = 0;\n  let result = '';\n  let match;\n  let placeholderIndex = greatestParameterPosition;\n\n  const normalizedValues = [];\n  const valueNames = Object.keys(values);\n\n  // eslint-disable-next-line no-cond-assign\n  while (match = namedPlaceholderRegex.exec(sql)) {\n    const matchIndex = match.index + 1;\n    const matchName = match[1];\n\n    if (!values.hasOwnProperty(matchName)) {\n      throw new Error('Named parameter reference does not have a matching value.');\n    }\n\n    const value = values[matchName];\n\n    if (valueNames.includes(matchName)) {\n      valueNames.splice(valueNames.indexOf(matchName));\n    }\n\n    normalizedValues.push(value);\n\n    result += sql.slice(chunkIndex, matchIndex);\n\n    chunkIndex = namedPlaceholderRegex.lastIndex;\n\n    ++placeholderIndex;\n\n    result += '$' + placeholderIndex;\n  }\n\n  if (valueNames.length) {\n    throw new Error('Values object contain value(s) not present as named parameter references in the query.');\n  }\n\n  if (chunkIndex === 0) {\n    result = sql;\n  } else if (chunkIndex < sql.length) {\n    result += sql.slice(chunkIndex);\n  }\n\n  return {\n    sql: result,\n    values: normalizedValues\n  };\n};\n"],"file":"normalizeNamedParameterReferences.js"}