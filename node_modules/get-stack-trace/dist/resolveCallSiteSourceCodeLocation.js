"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _sourceMap = require("source-map");

var _isCallSiteSourceCodeLocationResolvable = _interopRequireDefault(require("./isCallSiteSourceCodeLocationResolvable"));

var _isReadableFile = _interopRequireDefault(require("./isReadableFile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const resolveCallSiteSourceCodeLocation = async callSite => {
  if (!(0, _isCallSiteSourceCodeLocationResolvable.default)(callSite)) {
    throw new Error('Cannot resolve source code location.');
  }

  const columnNumber = callSite.getColumnNumber();
  const fileName = callSite.getFileName();
  const lineNumber = callSite.getLineNumber();

  if (!fileName) {
    throw new Error('Unexpected state.');
  }

  const maybeMapFilePath = fileName + '.map';
  let reportedNormalisedCallSite = {
    columnNumber,
    fileName,
    lineNumber
  };

  if ((0, _isReadableFile.default)(maybeMapFilePath)) {
    const rawSourceMap = JSON.parse(_fs.default.readFileSync(maybeMapFilePath, 'utf8'));
    const consumer = await new _sourceMap.SourceMapConsumer(rawSourceMap);
    const originalPosition = consumer.originalPositionFor({
      column: columnNumber,
      line: lineNumber
    });
    await consumer.destroy();

    if (originalPosition.source) {
      reportedNormalisedCallSite = {
        columnNumber: originalPosition.column,
        fileName: _path.default.resolve(_path.default.dirname(fileName)),
        lineNumber: originalPosition.line
      };
    }
  }

  return reportedNormalisedCallSite;
};

var _default = resolveCallSiteSourceCodeLocation;
exports.default = _default;
//# sourceMappingURL=resolveCallSiteSourceCodeLocation.js.map