{"version":3,"sources":["../src/resolveCallSiteSourceCodeLocation.js"],"names":["callSite","Error","columnNumber","getColumnNumber","fileName","getFileName","lineNumber","getLineNumber","maybeMapFilePath","reportedNormalisedCallSite","rawSourceMap","JSON","parse","fs","readFileSync","consumer","SourceMapConsumer","originalPosition","originalPositionFor","column","line","destroy","source","path","resolve","dirname"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AAGA;;AACA;;;;gDAMsBA,Q,IAA4D;AAChF,MAAI,CAAC,qDAAuCA,QAAvC,CAAL,EAAuD;AACrD,UAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,QAAMC,YAAY,GAAGF,QAAQ,CAACG,eAAT,EAArB;AACA,QAAMC,QAAQ,GAAGJ,QAAQ,CAACK,WAAT,EAAjB;AACA,QAAMC,UAAU,GAAGN,QAAQ,CAACO,aAAT,EAAnB;;AAEA,MAAI,CAACH,QAAL,EAAe;AACb,UAAM,IAAIH,KAAJ,CAAU,mBAAV,CAAN;AACD;;AAED,QAAMO,gBAAgB,GAAGJ,QAAQ,GAAG,MAApC;AAEA,MAAIK,0BAA0B,GAAG;AAC/BP,IAAAA,YAD+B;AAE/BE,IAAAA,QAF+B;AAG/BE,IAAAA;AAH+B,GAAjC;;AAMA,MAAI,6BAAeE,gBAAf,CAAJ,EAAsC;AACpC,UAAME,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAGC,YAAH,CAAgBN,gBAAhB,EAAkC,MAAlC,CAAX,CAArB;AAEA,UAAMO,QAAQ,GAAG,MAAM,IAAIC,4BAAJ,CAAsBN,YAAtB,CAAvB;AAEA,UAAMO,gBAAgB,GAAGF,QAAQ,CAACG,mBAAT,CAA6B;AACpDC,MAAAA,MAAM,EAAEjB,YAD4C;AAEpDkB,MAAAA,IAAI,EAAEd;AAF8C,KAA7B,CAAzB;AAKA,UAAMS,QAAQ,CAACM,OAAT,EAAN;;AAEA,QAAIJ,gBAAgB,CAACK,MAArB,EAA6B;AAC3Bb,MAAAA,0BAA0B,GAAG;AAC3BP,QAAAA,YAAY,EAAEe,gBAAgB,CAACE,MADJ;AAE3Bf,QAAAA,QAAQ,EAAEmB,cAAKC,OAAL,CAAaD,cAAKE,OAAL,CAAarB,QAAb,CAAb,CAFiB;AAG3BE,QAAAA,UAAU,EAAEW,gBAAgB,CAACG;AAHF,OAA7B;AAKD;AACF;;AAED,SAAOX,0BAAP;AACD,C","sourcesContent":["// @flow\n\nimport fs from 'fs';\nimport path from 'path';\nimport {\n  SourceMapConsumer\n} from 'source-map';\nimport isCallSiteSourceCodeLocationResolvable from './isCallSiteSourceCodeLocationResolvable';\nimport isReadableFile from './isReadableFile';\nimport type {\n  CallSiteType,\n  SourceCodeLocationType\n} from './types';\n\nexport default async (callSite: CallSiteType): Promise<SourceCodeLocationType> => {\n  if (!isCallSiteSourceCodeLocationResolvable(callSite)) {\n    throw new Error('Cannot resolve source code location.');\n  }\n\n  const columnNumber = callSite.getColumnNumber();\n  const fileName = callSite.getFileName();\n  const lineNumber = callSite.getLineNumber();\n\n  if (!fileName) {\n    throw new Error('Unexpected state.');\n  }\n\n  const maybeMapFilePath = fileName + '.map';\n\n  let reportedNormalisedCallSite = {\n    columnNumber,\n    fileName,\n    lineNumber\n  };\n\n  if (isReadableFile(maybeMapFilePath)) {\n    const rawSourceMap = JSON.parse(fs.readFileSync(maybeMapFilePath, 'utf8'));\n\n    const consumer = await new SourceMapConsumer(rawSourceMap);\n\n    const originalPosition = consumer.originalPositionFor({\n      column: columnNumber,\n      line: lineNumber\n    });\n\n    await consumer.destroy();\n\n    if (originalPosition.source) {\n      reportedNormalisedCallSite = {\n        columnNumber: originalPosition.column,\n        fileName: path.resolve(path.dirname(fileName)),\n        lineNumber: originalPosition.line\n      };\n    }\n  }\n\n  return reportedNormalisedCallSite;\n};\n"],"file":"resolveCallSiteSourceCodeLocation.js"}