{"version":3,"sources":["../src/log.js"],"names":["global","ROARR","registeredFlush","process","on","flush","message","body","JSON","stringify","write"],"mappings":";;;;;;;AAEA;;AAKAA,MAAM,CAACC,KAAP,GAAe,gDAAgCD,MAAM,CAACC,KAAP,IAAgB,EAAhD,CAAf,C,CAEA;AACA;;AACA,IAAI,CAACD,MAAM,CAACC,KAAP,CAAaC,eAAlB,EAAmC;AACjCF,EAAAA,MAAM,CAACC,KAAP,CAAaC,eAAb,GAA+B,IAA/B;AAEAC,EAAAA,OAAO,CAACC,EAAR,CAAW,MAAX,EAAmB,YAAM;AACvB,QAAIJ,MAAM,CAACC,KAAP,CAAaI,KAAjB,EAAwB;AACtBL,MAAAA,MAAM,CAACC,KAAP,CAAaI,KAAb;AACD;AACF,GAJD;AAKD;;eAQc,6BAAa,UAACC,OAAD,EAAa;AACvC,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAb;AAEAN,EAAAA,MAAM,CAACC,KAAP,CAAaS,KAAb,CAAmBH,IAAnB;AACD,CAJc,C","sourcesContent":["// @flow\n\nimport {\n  createLogger,\n  createRoarrInititialGlobalState\n} from './factories';\n\nglobal.ROARR = createRoarrInititialGlobalState(global.ROARR || {});\n\n// We want to register just one event listener for 'exit' event\n// across all instances of Roarr.\nif (!global.ROARR.registeredFlush) {\n  global.ROARR.registeredFlush = true;\n\n  process.on('exit', () => {\n    if (global.ROARR.flush) {\n      global.ROARR.flush();\n    }\n  });\n}\n\nexport type {\n  LoggerType,\n  MessageType,\n  TranslateMessageFunctionType\n} from './types';\n\nexport default createLogger((message) => {\n  const body = JSON.stringify(message);\n\n  global.ROARR.write(body);\n});\n"],"file":"log.js"}