{"version":3,"sources":["../../src/factories/createWriter.js"],"names":["createBlockingWriter","stream","flush","write","message","createBufferedWriter","bufferSize","global","ROARR","buffer","length","configuration","toUpperCase","process","stdout","stderr"],"mappings":";;;;;;;AAWA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,MAAD,EAAyC;AACpE,SAAO;AACLC,IAAAA,KAAK,EAAE,iBAAM,CAAE,CADV;AAELC,IAAAA,KAAK,EAAE,eAACC,OAAD,EAAqB;AAC1BH,MAAAA,MAAM,CAACE,KAAP,CAAaC,OAAO,GAAG,IAAvB;AACD;AAJI,GAAP;AAMD,CAPD;;AASA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACJ,MAAD,EAA0BK,UAA1B,EAA6D;AACxF,MAAMJ,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,QAAI,CAACK,MAAM,CAACC,KAAP,CAAaC,MAAlB,EAA0B;AACxB;AACD;;AAED,QAAMA,MAAM,GAAGF,MAAM,CAACC,KAAP,CAAaC,MAA5B;AAEAF,IAAAA,MAAM,CAACC,KAAP,CAAaC,MAAb,GAAsB,EAAtB;AAEAR,IAAAA,MAAM,CAACE,KAAP,CAAaM,MAAb;AACD,GAVD;;AAYA,SAAO;AACLP,IAAAA,KADK;AAELC,IAAAA,KAAK,EAAE,eAACC,OAAD,EAAqB;AAC1BG,MAAAA,MAAM,CAACC,KAAP,CAAaC,MAAb,IAAuBL,OAAO,GAAG,IAAjC;;AAEA,UAAIG,MAAM,CAACC,KAAP,CAAaC,MAAb,CAAoBC,MAApB,GAA6BJ,UAAjC,EAA6C;AAC3CJ,QAAAA,KAAK;AACN,OALyB,CAO1B;;AACD;AAVI,GAAP;AAYD,CAzBD,C,CA2BA;;;yCACgBS,a,EAAsD;AACpE,MAAMV,MAAM,GAAGU,aAAa,CAACV,MAAd,CAAqBW,WAArB,OAAuC,QAAvC,GAAkDC,OAAO,CAACC,MAA1D,GAAmED,OAAO,CAACE,MAA1F;;AAEA,MAAIJ,aAAa,CAACL,UAAlB,EAA8B;AAC5B,WAAOD,oBAAoB,CAACJ,MAAD,EAASU,aAAa,CAACL,UAAvB,CAA3B;AACD,GAFD,MAEO;AACL,WAAON,oBAAoB,CAACC,MAAD,CAA3B;AACD;AACF,C","sourcesContent":["// @flow\n\nimport type {\n  WriterType\n} from '../types';\n\ntype WriteConfigurationType = {|\n  +bufferSize: number,\n  +stream: 'STDOUT' | 'STDERR'\n|};\n\nconst createBlockingWriter = (stream: stream$Writable): WriterType => {\n  return {\n    flush: () => {},\n    write: (message: string) => {\n      stream.write(message + '\\n');\n    }\n  };\n};\n\nconst createBufferedWriter = (stream: stream$Writable, bufferSize: number): WriterType => {\n  const flush = () => {\n    if (!global.ROARR.buffer) {\n      return;\n    }\n\n    const buffer = global.ROARR.buffer;\n\n    global.ROARR.buffer = '';\n\n    stream.write(buffer);\n  };\n\n  return {\n    flush,\n    write: (message: string) => {\n      global.ROARR.buffer += message + '\\n';\n\n      if (global.ROARR.buffer.length > bufferSize) {\n        flush();\n      }\n\n      // @todo Write messages when the event loop is not busy.\n    }\n  };\n};\n\n// @todo Add browser support.\nexport default (configuration: WriteConfigurationType): WriterType => {\n  const stream = configuration.stream.toUpperCase() === 'STDOUT' ? process.stdout : process.stderr;\n\n  if (configuration.bufferSize) {\n    return createBufferedWriter(stream, configuration.bufferSize);\n  } else {\n    return createBlockingWriter(stream);\n  }\n};\n"],"file":"createWriter.js"}